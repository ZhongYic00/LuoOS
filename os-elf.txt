
os.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_start>:
    .extern trapvector

	.text
_start:
	# park harts with id != 0
	csrr	t0, mhartid		# read current hart id
    80000000:	f14022f3          	csrr	t0,mhartid
	mv	tp, t0			# keep CPU's hartid in its tp for later usage.
    80000004:	00028213          	mv	tp,t0
	bnez	t0, park		# if we're not on the hart 0
    80000008:	00029e63          	bnez	t0,80000024 <park>
					# we park the hart
	# Setup stacks, the stack grows from bottom to top, so we put the
	# stack pointer to the very end of the stack range.
	slli	t0, t0, 10		# shift left the hart id by 1024
    8000000c:	00a29293          	slli	t0,t0,0xa
	la	sp, stacks + STACK_SIZE	# set the initial stack pointer
    80000010:	00003117          	auipc	sp,0x3
    80000014:	3f010113          	addi	sp,sp,1008 # 80003400 <stacks+0x400>
					# to the end of the first stack space
	add	sp, sp, t0		# move the current hart stack pointer
    80000018:	00510133          	add	sp,sp,t0
					# to its place in the stack space

    call   sbi_init            # hart 0 jump to sbi
    8000001c:	6c1000ef          	jal	ra,80000edc <sbi_init>
    # la t6, specialstack
    # csrw mscratch,t6
    # j mtraptest1
    # j park

	j	start_kernel		# hart 0 jump to c
    80000020:	5580006f          	j	80000578 <start_kernel>

0000000080000024 <park>:

park:
	wfi
    80000024:	10500073          	wfi
	j	park
    80000028:	ffdff06f          	j	80000024 <park>

000000008000002c <_Z9uart_initv>:

#define uart_read_reg(reg) (*(UART_REG(reg)))
#define uart_write_reg(reg, v) (*(UART_REG(reg)) = (v))

void uart_init()
{
    8000002c:	fe010113          	addi	sp,sp,-32
    80000030:	00813c23          	sd	s0,24(sp)
    80000034:	02010413          	addi	s0,sp,32
	/* disable interrupts. */
	uart_write_reg(IER, 0x00);
    80000038:	100007b7          	lui	a5,0x10000
    8000003c:	00178793          	addi	a5,a5,1 # 10000001 <STACK_SIZE+0xffffc01>
    80000040:	00078023          	sb	zero,0(a5)
	 * We use 38.4K when 1.8432 MHZ crystal, so the corresponding value is 3.
	 * And due to the divisor register is two bytes (16 bits), so we need to
	 * split the value of 3(0x0003) into two bytes, DLL stores the low byte,
	 * DLM stores the high byte.
	 */
	uint8_t lcr = uart_read_reg(LCR);
    80000044:	100007b7          	lui	a5,0x10000
    80000048:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    8000004c:	0007c783          	lbu	a5,0(a5)
    80000050:	fef407a3          	sb	a5,-17(s0)
	uart_write_reg(LCR, lcr | (1 << 7));
    80000054:	100007b7          	lui	a5,0x10000
    80000058:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    8000005c:	fef44703          	lbu	a4,-17(s0)
    80000060:	f8076713          	ori	a4,a4,-128
    80000064:	0ff77713          	andi	a4,a4,255
    80000068:	00e78023          	sb	a4,0(a5)
	uart_write_reg(DLL, 0x03);
    8000006c:	100007b7          	lui	a5,0x10000
    80000070:	00300713          	li	a4,3
    80000074:	00e78023          	sb	a4,0(a5) # 10000000 <STACK_SIZE+0xffffc00>
	uart_write_reg(DLM, 0x00);
    80000078:	100007b7          	lui	a5,0x10000
    8000007c:	00178793          	addi	a5,a5,1 # 10000001 <STACK_SIZE+0xffffc01>
    80000080:	00078023          	sb	zero,0(a5)
	 * - number of stop bitsï¼š1 bit when word length is 8 bits
	 * - no parity
	 * - no break control
	 * - disabled baud latch
	 */
	lcr = 0;
    80000084:	fe0407a3          	sb	zero,-17(s0)
	uart_write_reg(LCR, lcr | (3 << 0));
    80000088:	100007b7          	lui	a5,0x10000
    8000008c:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    80000090:	fef44703          	lbu	a4,-17(s0)
    80000094:	00376713          	ori	a4,a4,3
    80000098:	0ff77713          	andi	a4,a4,255
    8000009c:	00e78023          	sb	a4,0(a5)
}
    800000a0:	00000013          	nop
    800000a4:	01813403          	ld	s0,24(sp)
    800000a8:	02010113          	addi	sp,sp,32
    800000ac:	00008067          	ret

00000000800000b0 <_Z9uart_putcc>:

int uart_putc(char ch)
{
    800000b0:	fe010113          	addi	sp,sp,-32
    800000b4:	00813c23          	sd	s0,24(sp)
    800000b8:	02010413          	addi	s0,sp,32
    800000bc:	00050793          	mv	a5,a0
    800000c0:	fef407a3          	sb	a5,-17(s0)
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
    800000c4:	100007b7          	lui	a5,0x10000
    800000c8:	00578793          	addi	a5,a5,5 # 10000005 <STACK_SIZE+0xffffc05>
    800000cc:	0007c783          	lbu	a5,0(a5)
    800000d0:	0ff7f793          	andi	a5,a5,255
    800000d4:	0007879b          	sext.w	a5,a5
    800000d8:	0207f793          	andi	a5,a5,32
    800000dc:	0007879b          	sext.w	a5,a5
    800000e0:	0017b793          	seqz	a5,a5
    800000e4:	0ff7f793          	andi	a5,a5,255
    800000e8:	00078463          	beqz	a5,800000f0 <_Z9uart_putcc+0x40>
    800000ec:	fd9ff06f          	j	800000c4 <_Z9uart_putcc+0x14>
	return uart_write_reg(THR, ch);
    800000f0:	10000737          	lui	a4,0x10000
    800000f4:	fef44783          	lbu	a5,-17(s0)
    800000f8:	00f70023          	sb	a5,0(a4) # 10000000 <STACK_SIZE+0xffffc00>
    800000fc:	0007879b          	sext.w	a5,a5
}
    80000100:	00078513          	mv	a0,a5
    80000104:	01813403          	ld	s0,24(sp)
    80000108:	02010113          	addi	sp,sp,32
    8000010c:	00008067          	ret

0000000080000110 <_Z9uart_putsPc>:

void uart_puts(char *s)
{
    80000110:	fe010113          	addi	sp,sp,-32
    80000114:	00113c23          	sd	ra,24(sp)
    80000118:	00813823          	sd	s0,16(sp)
    8000011c:	02010413          	addi	s0,sp,32
    80000120:	fea43423          	sd	a0,-24(s0)
	while (*s) {
    80000124:	fe843783          	ld	a5,-24(s0)
    80000128:	0007c783          	lbu	a5,0(a5)
    8000012c:	02078063          	beqz	a5,8000014c <_Z9uart_putsPc+0x3c>
		uart_putc(*s++);
    80000130:	fe843783          	ld	a5,-24(s0)
    80000134:	00178713          	addi	a4,a5,1
    80000138:	fee43423          	sd	a4,-24(s0)
    8000013c:	0007c783          	lbu	a5,0(a5)
    80000140:	00078513          	mv	a0,a5
    80000144:	f6dff0ef          	jal	ra,800000b0 <_Z9uart_putcc>
	while (*s) {
    80000148:	fddff06f          	j	80000124 <_Z9uart_putsPc+0x14>
	}
}
    8000014c:	00000013          	nop
    80000150:	01813083          	ld	ra,24(sp)
    80000154:	01013403          	ld	s0,16(sp)
    80000158:	02010113          	addi	sp,sp,32
    8000015c:	00008067          	ret

0000000080000160 <_Z21timerInterruptHandlerv>:
#define TIMER_INTERVAL 5000000

static xlen_t gpr[30];
static hook_t hooks[10];

void timerInterruptHandler(){
    80000160:	fa010113          	addi	sp,sp,-96
    80000164:	04113c23          	sd	ra,88(sp)
    80000168:	04813823          	sd	s0,80(sp)
    8000016c:	06010413          	addi	s0,sp,96
    int hart=sbi::readHartId();
    80000170:	540000ef          	jal	ra,800006b0 <_ZN3sbi10readHartIdEv>
    80000174:	00050793          	mv	a5,a0
    80000178:	fef42223          	sw	a5,-28(s0)
    static int cnt=0;
    xlen_t time;
    csrRead(time,time);
    8000017c:	c01027f3          	rdtime	a5
    80000180:	fcf43c23          	sd	a5,-40(s0)
    80000184:	0200c7b7          	lui	a5,0x200c
    80000188:	ff878793          	addi	a5,a5,-8 # 200bff8 <STACK_SIZE+0x200bbf8>
    8000018c:	faf43023          	sd	a5,-96(s0)
 */
#define MAXNUM_CPU 8

template<typename T>
FORCEDINLINE T& mmio(xlen_t addr){
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    80000190:	fa043783          	ld	a5,-96(s0)
    auto mtime=mmio<volatile xlen_t>(platform::clint::mtime);
    80000194:	0007b783          	ld	a5,0(a5)
    80000198:	fcf43823          	sd	a5,-48(s0)
    volatile xlen_t& mtimecmp=mmio<volatile xlen_t>(platform::clint::mtimecmpOf(hart));
    8000019c:	fe442783          	lw	a5,-28(s0)
    800001a0:	00078513          	mv	a0,a5
    800001a4:	474000ef          	jal	ra,80000618 <_ZN8platform5clint10mtimecmpOfEi>
    800001a8:	00050793          	mv	a5,a0
    800001ac:	faf43423          	sd	a5,-88(s0)
    800001b0:	fa843783          	ld	a5,-88(s0)
    800001b4:	fcf43423          	sd	a5,-56(s0)
    printf("S-Mode timer Interrupt[%d]::%ld %ld<%ld\n",cnt++,time,mtimecmp,mtime);
    800001b8:	00005797          	auipc	a5,0x5
    800001bc:	02078793          	addi	a5,a5,32 # 800051d8 <_ZZ21timerInterruptHandlervE3cnt>
    800001c0:	0007a783          	lw	a5,0(a5)
    800001c4:	0017871b          	addiw	a4,a5,1
    800001c8:	0007069b          	sext.w	a3,a4
    800001cc:	00005717          	auipc	a4,0x5
    800001d0:	00c70713          	addi	a4,a4,12 # 800051d8 <_ZZ21timerInterruptHandlervE3cnt>
    800001d4:	00d72023          	sw	a3,0(a4)
    800001d8:	fc843703          	ld	a4,-56(s0)
    800001dc:	00073683          	ld	a3,0(a4)
    800001e0:	fd043703          	ld	a4,-48(s0)
    800001e4:	fd843603          	ld	a2,-40(s0)
    800001e8:	00078593          	mv	a1,a5
    800001ec:	00001517          	auipc	a0,0x1
    800001f0:	6fc50513          	addi	a0,a0,1788 # 800018e8 <_ZN3sys7syscallEi+0x30>
    800001f4:	5c0010ef          	jal	ra,800017b4 <printf>
    mtimecmp+=TIMER_INTERVAL;
    800001f8:	fc843783          	ld	a5,-56(s0)
    800001fc:	0007b703          	ld	a4,0(a5)
    80000200:	004c57b7          	lui	a5,0x4c5
    80000204:	b4078793          	addi	a5,a5,-1216 # 4c4b40 <STACK_SIZE+0x4c4740>
    80000208:	00f70733          	add	a4,a4,a5
    8000020c:	fc843783          	ld	a5,-56(s0)
    80000210:	00e7b023          	sd	a4,0(a5)
    for(auto hook: hooks)if(hook)hook();
    80000214:	00005797          	auipc	a5,0x5
    80000218:	f7478793          	addi	a5,a5,-140 # 80005188 <_ZL5hooks>
    8000021c:	fcf43023          	sd	a5,-64(s0)
    80000220:	00005797          	auipc	a5,0x5
    80000224:	f6878793          	addi	a5,a5,-152 # 80005188 <_ZL5hooks>
    80000228:	fef43423          	sd	a5,-24(s0)
    8000022c:	00005797          	auipc	a5,0x5
    80000230:	fac78793          	addi	a5,a5,-84 # 800051d8 <_ZZ21timerInterruptHandlervE3cnt>
    80000234:	faf43c23          	sd	a5,-72(s0)
    80000238:	fe843703          	ld	a4,-24(s0)
    8000023c:	fb843783          	ld	a5,-72(s0)
    80000240:	02f70863          	beq	a4,a5,80000270 <_Z21timerInterruptHandlerv+0x110>
    80000244:	fe843783          	ld	a5,-24(s0)
    80000248:	0007b783          	ld	a5,0(a5)
    8000024c:	faf43823          	sd	a5,-80(s0)
    80000250:	fb043783          	ld	a5,-80(s0)
    80000254:	00078663          	beqz	a5,80000260 <_Z21timerInterruptHandlerv+0x100>
    80000258:	fb043783          	ld	a5,-80(s0)
    8000025c:	000780e7          	jalr	a5
    80000260:	fe843783          	ld	a5,-24(s0)
    80000264:	00878793          	addi	a5,a5,8
    80000268:	fef43423          	sd	a5,-24(s0)
    8000026c:	fcdff06f          	j	80000238 <_Z21timerInterruptHandlerv+0xd8>
    sbi::resetXTIE();
    80000270:	470000ef          	jal	ra,800006e0 <_ZN3sbi9resetXTIEEv>
}
    80000274:	00000013          	nop
    80000278:	05813083          	ld	ra,88(sp)
    8000027c:	05013403          	ld	s0,80(sp)
    80000280:	06010113          	addi	sp,sp,96
    80000284:	00008067          	ret

0000000080000288 <_Z4nonev>:
int none(){
    80000288:	ff010113          	addi	sp,sp,-16
    8000028c:	00813423          	sd	s0,8(sp)
    80000290:	01010413          	addi	s0,sp,16
    return 0;
    80000294:	00000793          	li	a5,0
}
    80000298:	00078513          	mv	a0,a5
    8000029c:	00813403          	ld	s0,8(sp)
    800002a0:	01010113          	addi	sp,sp,16
    800002a4:	00008067          	ret

00000000800002a8 <_Z13uecallHandlerv>:
constexpr static syscall_t syscallPtrs[]={none,none};
constexpr syscall_t sys::getSyscall(int id){return syscallPtrs[id];}
void uecallHandler(){
    800002a8:	fe010113          	addi	sp,sp,-32
    800002ac:	00113c23          	sd	ra,24(sp)
    800002b0:	00813823          	sd	s0,16(sp)
    800002b4:	02010413          	addi	s0,sp,32
    register int ecallId asm("a7");
    xlen_t &rtval=gpr[9];
    800002b8:	00005797          	auipc	a5,0x5
    800002bc:	e2878793          	addi	a5,a5,-472 # 800050e0 <_ZL3gpr+0x48>
    800002c0:	fef43423          	sd	a5,-24(s0)
    printf("uecall [%d]\n",ecallId);
    800002c4:	0008879b          	sext.w	a5,a7
    800002c8:	00078593          	mv	a1,a5
    800002cc:	00001517          	auipc	a0,0x1
    800002d0:	65c50513          	addi	a0,a0,1628 # 80001928 <_ZL11syscallPtrs+0x10>
    800002d4:	4e0010ef          	jal	ra,800017b4 <printf>
    //     case 0:;break;
    //     case 1:;break;
    //     default: rtval=1;break;
    // }
    using namespace sys;
    if(ecallId<nSyscalls)rtval=getSyscall(ecallId)();
    800002d8:	0008879b          	sext.w	a5,a7
    800002dc:	00078713          	mv	a4,a5
    800002e0:	00100793          	li	a5,1
    800002e4:	02e7c663          	blt	a5,a4,80000310 <_Z13uecallHandlerv+0x68>
    800002e8:	0008879b          	sext.w	a5,a7
    800002ec:	00078513          	mv	a0,a5
    800002f0:	420000ef          	jal	ra,80000710 <_ZN3sys10getSyscallEi>
    800002f4:	00050793          	mv	a5,a0
    800002f8:	000780e7          	jalr	a5
    800002fc:	00050793          	mv	a5,a0
    80000300:	00078713          	mv	a4,a5
    80000304:	fe843783          	ld	a5,-24(s0)
    80000308:	00e7b023          	sd	a4,0(a5)
    else rtval=1;
}
    8000030c:	0100006f          	j	8000031c <_Z13uecallHandlerv+0x74>
    else rtval=1;
    80000310:	fe843783          	ld	a5,-24(s0)
    80000314:	00100713          	li	a4,1
    80000318:	00e7b023          	sd	a4,0(a5)
}
    8000031c:	00000013          	nop
    80000320:	01813083          	ld	ra,24(sp)
    80000324:	01013403          	ld	s0,16(sp)
    80000328:	02010113          	addi	sp,sp,32
    8000032c:	00008067          	ret

0000000080000330 <straphandler>:

extern "C" void straphandler(){
    80000330:	fe010113          	addi	sp,sp,-32
    80000334:	00113c23          	sd	ra,24(sp)
    80000338:	00813823          	sd	s0,16(sp)
    8000033c:	02010413          	addi	s0,sp,32
    ptr_t sepc; csrRead(sepc,sepc);
    80000340:	141027f3          	csrr	a5,sepc
    80000344:	fef43423          	sd	a5,-24(s0)
    xlen_t scause; csrRead(scause,scause);
    80000348:	142027f3          	csrr	a5,scause
    8000034c:	fef43023          	sd	a5,-32(s0)
    // printf("mtraphandler cause=[%d]%d mepc=%lx\n",isInterrupt(mcause),mcause<<1>>1,mepc);

    if(csr::mcause::isInterrupt(scause)){
    80000350:	fe043503          	ld	a0,-32(s0)
    80000354:	300000ef          	jal	ra,80000654 <_ZN3csr6mcause11isInterruptEm>
    80000358:	00050793          	mv	a5,a0
    8000035c:	02078863          	beqz	a5,8000038c <straphandler+0x5c>
        switch(scause<<1>>1){
    80000360:	fe043703          	ld	a4,-32(s0)
    80000364:	fff00793          	li	a5,-1
    80000368:	0017d793          	srli	a5,a5,0x1
    8000036c:	00f77733          	and	a4,a4,a5
    80000370:	00500793          	li	a5,5
    80000374:	00f71863          	bne	a4,a5,80000384 <straphandler+0x54>
            // case ssi: break;
            // case hsi: break;
            // case msi: break;

            // case uti: break;
            case sti: timerInterruptHandler(); break;
    80000378:	de9ff0ef          	jal	ra,80000160 <_Z21timerInterruptHandlerv>
    8000037c:	00000013          	nop
                halt();
        }
        csrWrite(sepc,sepc+4);
    }
    // printf("mtraphandler over\n");
}
    80000380:	0500006f          	j	800003d0 <straphandler+0xa0>
                halt();
    80000384:	4e0010ef          	jal	ra,80001864 <halt>
}
    80000388:	0480006f          	j	800003d0 <straphandler+0xa0>
        switch(scause){
    8000038c:	fe043703          	ld	a4,-32(s0)
    80000390:	00700793          	li	a5,7
    80000394:	02f70663          	beq	a4,a5,800003c0 <straphandler+0x90>
    80000398:	fe043703          	ld	a4,-32(s0)
    8000039c:	00800793          	li	a5,8
    800003a0:	00f71663          	bne	a4,a5,800003ac <straphandler+0x7c>
            case uecall:uecallHandler();break;
    800003a4:	f05ff0ef          	jal	ra,800002a8 <_Z13uecallHandlerv>
    800003a8:	01c0006f          	j	800003c4 <straphandler+0x94>
                printf("exception\n");
    800003ac:	00001517          	auipc	a0,0x1
    800003b0:	58c50513          	addi	a0,a0,1420 # 80001938 <_ZL11syscallPtrs+0x20>
    800003b4:	400010ef          	jal	ra,800017b4 <printf>
                halt();
    800003b8:	4ac010ef          	jal	ra,80001864 <halt>
    800003bc:	0080006f          	j	800003c4 <straphandler+0x94>
            case storeAccessFault:break;
    800003c0:	00000013          	nop
        csrWrite(sepc,sepc+4);
    800003c4:	fe843783          	ld	a5,-24(s0)
    800003c8:	00478793          	addi	a5,a5,4
    800003cc:	14179073          	csrw	sepc,a5
}
    800003d0:	00000013          	nop
    800003d4:	01813083          	ld	ra,24(sp)
    800003d8:	01013403          	ld	s0,16(sp)
    800003dc:	02010113          	addi	sp,sp,32
    800003e0:	00008067          	ret

00000000800003e4 <strapwrapper>:
extern "C" __attribute__((naked)) void strapwrapper(){
    csrSwap(sscratch,t6);
    800003e4:	140f9ff3          	csrrw	t6,sscratch,t6
    saveContext();
    800003e8:	001fb023          	sd	ra,0(t6)
    800003ec:	002fb423          	sd	sp,8(t6)
    800003f0:	003fb823          	sd	gp,16(t6)
    800003f4:	004fbc23          	sd	tp,24(t6)
    800003f8:	025fb023          	sd	t0,32(t6)
    800003fc:	026fb423          	sd	t1,40(t6)
    80000400:	027fb823          	sd	t2,48(t6)
    80000404:	028fbc23          	sd	s0,56(t6)
    80000408:	049fb023          	sd	s1,64(t6)
    8000040c:	04afb423          	sd	a0,72(t6)
    80000410:	04bfb823          	sd	a1,80(t6)
    80000414:	04cfbc23          	sd	a2,88(t6)
    80000418:	06dfb023          	sd	a3,96(t6)
    8000041c:	06efb423          	sd	a4,104(t6)
    80000420:	06ffb823          	sd	a5,112(t6)
    80000424:	070fbc23          	sd	a6,120(t6)
    80000428:	091fb023          	sd	a7,128(t6)
    8000042c:	092fb423          	sd	s2,136(t6)
    80000430:	093fb823          	sd	s3,144(t6)
    80000434:	094fbc23          	sd	s4,152(t6)
    80000438:	0b5fb023          	sd	s5,160(t6)
    8000043c:	0b6fb423          	sd	s6,168(t6)
    80000440:	0b7fb823          	sd	s7,176(t6)
    80000444:	0b8fbc23          	sd	s8,184(t6)
    80000448:	0d9fb023          	sd	s9,192(t6)
    8000044c:	0dafb423          	sd	s10,200(t6)
    80000450:	0dbfb823          	sd	s11,208(t6)
    80000454:	0dcfbc23          	sd	t3,216(t6)
    80000458:	0fdfb023          	sd	t4,224(t6)
    8000045c:	0fefb423          	sd	t5,232(t6)
    straphandler();
    80000460:	ed1ff0ef          	jal	ra,80000330 <straphandler>
    restoreContext();
    80000464:	000fb083          	ld	ra,0(t6)
    80000468:	008fb103          	ld	sp,8(t6)
    8000046c:	010fb183          	ld	gp,16(t6)
    80000470:	018fb203          	ld	tp,24(t6)
    80000474:	020fb283          	ld	t0,32(t6)
    80000478:	028fb303          	ld	t1,40(t6)
    8000047c:	030fb383          	ld	t2,48(t6)
    80000480:	038fb403          	ld	s0,56(t6)
    80000484:	040fb483          	ld	s1,64(t6)
    80000488:	048fb503          	ld	a0,72(t6)
    8000048c:	050fb583          	ld	a1,80(t6)
    80000490:	058fb603          	ld	a2,88(t6)
    80000494:	060fb683          	ld	a3,96(t6)
    80000498:	068fb703          	ld	a4,104(t6)
    8000049c:	070fb783          	ld	a5,112(t6)
    800004a0:	078fb803          	ld	a6,120(t6)
    800004a4:	080fb883          	ld	a7,128(t6)
    800004a8:	088fb903          	ld	s2,136(t6)
    800004ac:	090fb983          	ld	s3,144(t6)
    800004b0:	098fba03          	ld	s4,152(t6)
    800004b4:	0a0fba83          	ld	s5,160(t6)
    800004b8:	0a8fbb03          	ld	s6,168(t6)
    800004bc:	0b0fbb83          	ld	s7,176(t6)
    800004c0:	0b8fbc03          	ld	s8,184(t6)
    800004c4:	0c0fbc83          	ld	s9,192(t6)
    800004c8:	0c8fbd03          	ld	s10,200(t6)
    800004cc:	0d0fbd83          	ld	s11,208(t6)
    800004d0:	0d8fbe03          	ld	t3,216(t6)
    800004d4:	0e0fbe83          	ld	t4,224(t6)
    800004d8:	0e8fbf03          	ld	t5,232(t6)
    csrSwap(sscratch,t6);
    800004dc:	140f9ff3          	csrrw	t6,sscratch,t6
    ExecInst(sret);
    800004e0:	10200073          	sret
}
    800004e4:	00000013          	nop

00000000800004e8 <_ZL9timerInitv>:
static void timerInit(){
    800004e8:	fc010113          	addi	sp,sp,-64
    800004ec:	02113c23          	sd	ra,56(sp)
    800004f0:	02813823          	sd	s0,48(sp)
    800004f4:	02913423          	sd	s1,40(sp)
    800004f8:	04010413          	addi	s0,sp,64
    int hart=sbi::readHartId();
    800004fc:	1b4000ef          	jal	ra,800006b0 <_ZN3sbi10readHartIdEv>
    80000500:	00050793          	mv	a5,a0
    80000504:	fcf42e23          	sw	a5,-36(s0)
    // int hart=0;
    printf("hart=%d\n",hart);
    80000508:	fdc42783          	lw	a5,-36(s0)
    8000050c:	00078593          	mv	a1,a5
    80000510:	00001517          	auipc	a0,0x1
    80000514:	43850513          	addi	a0,a0,1080 # 80001948 <_ZL11syscallPtrs+0x30>
    80000518:	29c010ef          	jal	ra,800017b4 <printf>
    8000051c:	0200c7b7          	lui	a5,0x200c
    80000520:	ff878793          	addi	a5,a5,-8 # 200bff8 <STACK_SIZE+0x200bbf8>
    80000524:	fcf43423          	sd	a5,-56(s0)
    80000528:	fc843783          	ld	a5,-56(s0)
    mmio<xlen_t>(platform::clint::mtimecmpOf(hart))=mmio<xlen_t>(platform::clint::mtime)+TIMER_INTERVAL;
    8000052c:	0007b483          	ld	s1,0(a5)
    80000530:	fdc42783          	lw	a5,-36(s0)
    80000534:	00078513          	mv	a0,a5
    80000538:	0e0000ef          	jal	ra,80000618 <_ZN8platform5clint10mtimecmpOfEi>
    8000053c:	00050793          	mv	a5,a0
    80000540:	fcf43823          	sd	a5,-48(s0)
    80000544:	fd043783          	ld	a5,-48(s0)
    80000548:	004c5737          	lui	a4,0x4c5
    8000054c:	b4070713          	addi	a4,a4,-1216 # 4c4b40 <STACK_SIZE+0x4c4740>
    80000550:	00e48733          	add	a4,s1,a4
    80000554:	00e7b023          	sd	a4,0(a5)
    csrSet(sie,BIT(csr::mie::stie));
    80000558:	02000793          	li	a5,32
    8000055c:	1047a073          	csrs	sie,a5
}
    80000560:	00000013          	nop
    80000564:	03813083          	ld	ra,56(sp)
    80000568:	03013403          	ld	s0,48(sp)
    8000056c:	02813483          	ld	s1,40(sp)
    80000570:	04010113          	addi	sp,sp,64
    80000574:	00008067          	ret

0000000080000578 <start_kernel>:
extern void program0();
extern "C" void start_kernel(){
    80000578:	fe010113          	addi	sp,sp,-32
    8000057c:	00113c23          	sd	ra,24(sp)
    80000580:	00813823          	sd	s0,16(sp)
    80000584:	02010413          	addi	s0,sp,32
    for(int i=0;i<10;i++)
    80000588:	fe042623          	sw	zero,-20(s0)
    8000058c:	fec42783          	lw	a5,-20(s0)
    80000590:	0007871b          	sext.w	a4,a5
    80000594:	00900793          	li	a5,9
    80000598:	02e7c463          	blt	a5,a4,800005c0 <start_kernel+0x48>
        printf("%d:Hello RVOS!\n",i);
    8000059c:	fec42783          	lw	a5,-20(s0)
    800005a0:	00078593          	mv	a1,a5
    800005a4:	00001517          	auipc	a0,0x1
    800005a8:	3b450513          	addi	a0,a0,948 # 80001958 <_ZL11syscallPtrs+0x40>
    800005ac:	208010ef          	jal	ra,800017b4 <printf>
    for(int i=0;i<10;i++)
    800005b0:	fec42783          	lw	a5,-20(s0)
    800005b4:	0017879b          	addiw	a5,a5,1
    800005b8:	fef42623          	sw	a5,-20(s0)
    800005bc:	fd1ff06f          	j	8000058c <start_kernel+0x14>
    csrWrite(sscratch,gpr);
    800005c0:	00005797          	auipc	a5,0x5
    800005c4:	ad878793          	addi	a5,a5,-1320 # 80005098 <_ZL3gpr>
    800005c8:	14079073          	csrw	sscratch,a5
    csrWrite(stvec,strapwrapper);
    800005cc:	00000797          	auipc	a5,0x0
    800005d0:	e1878793          	addi	a5,a5,-488 # 800003e4 <strapwrapper>
    800005d4:	10579073          	csrw	stvec,a5
    csrSet(sstatus,BIT(csr::mstatus::sie));
    800005d8:	00200793          	li	a5,2
    800005dc:	1007a073          	csrs	sstatus,a5
    csrSet(sie,BIT(csr::mie::ssie));
    800005e0:	00200793          	li	a5,2
    800005e4:	1047a073          	csrs	sie,a5
    timerInit();
    800005e8:	f01ff0ef          	jal	ra,800004e8 <_ZL9timerInitv>
    // halt();
    // while(true);
    csrClear(sstatus,1l<<csr::mstatus::spp);
    800005ec:	10000793          	li	a5,256
    800005f0:	1007b073          	csrc	sstatus,a5
    csrWrite(sepc,program0);
    800005f4:	00001797          	auipc	a5,0x1
    800005f8:	28478793          	addi	a5,a5,644 # 80001878 <_Z8program0v>
    800005fc:	14179073          	csrw	sepc,a5
    ExecInst(sret);
    80000600:	10200073          	sret
    80000604:	00000013          	nop
    80000608:	01813083          	ld	ra,24(sp)
    8000060c:	01013403          	ld	s0,16(sp)
    80000610:	02010113          	addi	sp,sp,32
    80000614:	00008067          	ret

0000000080000618 <_ZN8platform5clint10mtimecmpOfEi>:
    {
        constexpr auto base=0x2000000l,
            mtime=base+0xbff8,
            mtimecmp=base+0x4000
            ;
        constexpr xlen_t mtimecmpOf(int hart) { return mtimecmp+hart*0x8; }
    80000618:	fe010113          	addi	sp,sp,-32
    8000061c:	00813c23          	sd	s0,24(sp)
    80000620:	02010413          	addi	s0,sp,32
    80000624:	00050793          	mv	a5,a0
    80000628:	fef42623          	sw	a5,-20(s0)
    8000062c:	fec42783          	lw	a5,-20(s0)
    80000630:	0037979b          	slliw	a5,a5,0x3
    80000634:	0007879b          	sext.w	a5,a5
    80000638:	00078713          	mv	a4,a5
    8000063c:	020047b7          	lui	a5,0x2004
    80000640:	00f707b3          	add	a5,a4,a5
    80000644:	00078513          	mv	a0,a5
    80000648:	01813403          	ld	s0,24(sp)
    8000064c:	02010113          	addi	sp,sp,32
    80000650:	00008067          	ret

0000000080000654 <_ZN3csr6mcause11isInterruptEm>:
            breakpoint=3,
            storeAccessFault=7,
            uecall=8,
            secall=9,
        };
        constexpr bool isInterrupt(xlen_t mcause){return (mcause>>63)&1;}
    80000654:	fe010113          	addi	sp,sp,-32
    80000658:	00813c23          	sd	s0,24(sp)
    8000065c:	02010413          	addi	s0,sp,32
    80000660:	fea43423          	sd	a0,-24(s0)
    80000664:	fe843783          	ld	a5,-24(s0)
    80000668:	03f7d793          	srli	a5,a5,0x3f
    8000066c:	0ff7f793          	andi	a5,a5,255
    80000670:	00078513          	mv	a0,a5
    80000674:	01813403          	ld	s0,24(sp)
    80000678:	02010113          	addi	sp,sp,32
    8000067c:	00008067          	ret

0000000080000680 <_ZN3sbi5ecallEi>:
        none,
        hart,
        xtie,
        xsie,
    };
    inline int ecall(int ecallId){
    80000680:	fe010113          	addi	sp,sp,-32
    80000684:	00813c23          	sd	s0,24(sp)
    80000688:	02010413          	addi	s0,sp,32
    8000068c:	00050793          	mv	a5,a0
    80000690:	fef42623          	sw	a5,-20(s0)
        register int a7 asm("a7")=ecallId;
    80000694:	fec42883          	lw	a7,-20(s0)
        ExecInst(ecall);
    80000698:	00000073          	ecall
        register int a0 asm("a0");
        return a0;
    8000069c:	0005079b          	sext.w	a5,a0
    }
    800006a0:	00078513          	mv	a0,a5
    800006a4:	01813403          	ld	s0,24(sp)
    800006a8:	02010113          	addi	sp,sp,32
    800006ac:	00008067          	ret

00000000800006b0 <_ZN3sbi10readHartIdEv>:
    inline int readHartId(){return ecall(ecalls::hart);}
    800006b0:	ff010113          	addi	sp,sp,-16
    800006b4:	00113423          	sd	ra,8(sp)
    800006b8:	00813023          	sd	s0,0(sp)
    800006bc:	01010413          	addi	s0,sp,16
    800006c0:	00100513          	li	a0,1
    800006c4:	fbdff0ef          	jal	ra,80000680 <_ZN3sbi5ecallEi>
    800006c8:	00050793          	mv	a5,a0
    800006cc:	00078513          	mv	a0,a5
    800006d0:	00813083          	ld	ra,8(sp)
    800006d4:	00013403          	ld	s0,0(sp)
    800006d8:	01010113          	addi	sp,sp,16
    800006dc:	00008067          	ret

00000000800006e0 <_ZN3sbi9resetXTIEEv>:
    inline int resetXTIE(){return ecall(ecalls::xtie);}
    800006e0:	ff010113          	addi	sp,sp,-16
    800006e4:	00113423          	sd	ra,8(sp)
    800006e8:	00813023          	sd	s0,0(sp)
    800006ec:	01010413          	addi	s0,sp,16
    800006f0:	00200513          	li	a0,2
    800006f4:	f8dff0ef          	jal	ra,80000680 <_ZN3sbi5ecallEi>
    800006f8:	00050793          	mv	a5,a0
    800006fc:	00078513          	mv	a0,a5
    80000700:	00813083          	ld	ra,8(sp)
    80000704:	00013403          	ld	s0,0(sp)
    80000708:	01010113          	addi	sp,sp,16
    8000070c:	00008067          	ret

0000000080000710 <_ZN3sys10getSyscallEi>:
constexpr syscall_t sys::getSyscall(int id){return syscallPtrs[id];}
    80000710:	fe010113          	addi	sp,sp,-32
    80000714:	00813c23          	sd	s0,24(sp)
    80000718:	02010413          	addi	s0,sp,32
    8000071c:	00050793          	mv	a5,a0
    80000720:	fef42623          	sw	a5,-20(s0)
    80000724:	00001717          	auipc	a4,0x1
    80000728:	1f470713          	addi	a4,a4,500 # 80001918 <_ZL11syscallPtrs>
    8000072c:	fec42783          	lw	a5,-20(s0)
    80000730:	00379793          	slli	a5,a5,0x3
    80000734:	00f707b3          	add	a5,a4,a5
    80000738:	0007b783          	ld	a5,0(a5) # 2004000 <STACK_SIZE+0x2003c00>
    8000073c:	00078513          	mv	a0,a5
    80000740:	01813403          	ld	s0,24(sp)
    80000744:	02010113          	addi	sp,sp,32
    80000748:	00008067          	ret

000000008000074c <_Z9plicClaimv>:

#define TIMER_INTERVAL 5000000

static xlen_t gpr[30];

int plicClaim(){
    8000074c:	fe010113          	addi	sp,sp,-32
    80000750:	00113c23          	sd	ra,24(sp)
    80000754:	00813823          	sd	s0,16(sp)
    80000758:	02010413          	addi	s0,sp,32
    int hart=csr::hart();
    8000075c:	26d000ef          	jal	ra,800011c8 <_ZN3csr4hartEv>
    80000760:	00050793          	mv	a5,a0
    80000764:	fef42623          	sw	a5,-20(s0)
    int irq=mmio<int>(platform::plic::claimOf(hart));
    80000768:	fec42783          	lw	a5,-20(s0)
    8000076c:	00078513          	mv	a0,a5
    80000770:	1c9000ef          	jal	ra,80001138 <_ZN8platform4plic7claimOfEi>
    80000774:	00050793          	mv	a5,a0
    80000778:	fef43023          	sd	a5,-32(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    8000077c:	fe043783          	ld	a5,-32(s0)
    80000780:	0007a783          	lw	a5,0(a5)
    80000784:	fef42423          	sw	a5,-24(s0)
    return irq;
    80000788:	fe842783          	lw	a5,-24(s0)
}
    8000078c:	00078513          	mv	a0,a5
    80000790:	01813083          	ld	ra,24(sp)
    80000794:	01013403          	ld	s0,16(sp)
    80000798:	02010113          	addi	sp,sp,32
    8000079c:	00008067          	ret

00000000800007a0 <_Z12plicCompletei>:
void plicComplete(int irq){
    800007a0:	fd010113          	addi	sp,sp,-48
    800007a4:	02113423          	sd	ra,40(sp)
    800007a8:	02813023          	sd	s0,32(sp)
    800007ac:	03010413          	addi	s0,sp,48
    800007b0:	00050793          	mv	a5,a0
    800007b4:	fcf42e23          	sw	a5,-36(s0)
    int hart=csr::hart();
    800007b8:	211000ef          	jal	ra,800011c8 <_ZN3csr4hartEv>
    800007bc:	00050793          	mv	a5,a0
    800007c0:	fef42623          	sw	a5,-20(s0)
    mmio<int>(platform::plic::claimOf(hart))=irq;
    800007c4:	fec42783          	lw	a5,-20(s0)
    800007c8:	00078513          	mv	a0,a5
    800007cc:	16d000ef          	jal	ra,80001138 <_ZN8platform4plic7claimOfEi>
    800007d0:	00050793          	mv	a5,a0
    800007d4:	fef43023          	sd	a5,-32(s0)
    800007d8:	fe043783          	ld	a5,-32(s0)
    800007dc:	fdc42703          	lw	a4,-36(s0)
    800007e0:	00e7a023          	sw	a4,0(a5)
}
    800007e4:	00000013          	nop
    800007e8:	02813083          	ld	ra,40(sp)
    800007ec:	02013403          	ld	s0,32(sp)
    800007f0:	03010113          	addi	sp,sp,48
    800007f4:	00008067          	ret

00000000800007f8 <_Z24externalInterruptHandlerv>:

void externalInterruptHandler(){
    800007f8:	fd010113          	addi	sp,sp,-48
    800007fc:	02113423          	sd	ra,40(sp)
    80000800:	02813023          	sd	s0,32(sp)
    80000804:	03010413          	addi	s0,sp,48
    int irq=plicClaim();
    80000808:	f45ff0ef          	jal	ra,8000074c <_Z9plicClaimv>
    8000080c:	00050793          	mv	a5,a0
    80000810:	fef42423          	sw	a5,-24(s0)
    // printf("externalInterruptHandler(irq=%d)\n",irq);
    static int levelcnt=0;
    levelcnt++;
    80000814:	00005797          	auipc	a5,0x5
    80000818:	b4c78793          	addi	a5,a5,-1204 # 80005360 <_ZZ24externalInterruptHandlervE8levelcnt>
    8000081c:	0007a783          	lw	a5,0(a5)
    80000820:	0017879b          	addiw	a5,a5,1
    80000824:	0007871b          	sext.w	a4,a5
    80000828:	00005797          	auipc	a5,0x5
    8000082c:	b3878793          	addi	a5,a5,-1224 # 80005360 <_ZZ24externalInterruptHandlervE8levelcnt>
    80000830:	00e7a023          	sw	a4,0(a5)
    if(irq==platform::uart0::irq){
    80000834:	fe842783          	lw	a5,-24(s0)
    80000838:	0007871b          	sext.w	a4,a5
    8000083c:	00a00793          	li	a5,10
    80000840:	08f71463          	bne	a4,a5,800008c8 <_Z24externalInterruptHandlerv+0xd0>
        using namespace platform::uart0;
        int cnt=0;
    80000844:	fe042623          	sw	zero,-20(s0)
        while(mmio<volatile lsr>(reg(LSR)).rxnemp){
    80000848:	00500513          	li	a0,5
    8000084c:	740000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000850:	00050793          	mv	a5,a0
    80000854:	fcf43c23          	sd	a5,-40(s0)
    80000858:	fd843783          	ld	a5,-40(s0)
    8000085c:	0007c783          	lbu	a5,0(a5)
    80000860:	0017f793          	andi	a5,a5,1
    80000864:	0ff7f793          	andi	a5,a5,255
    80000868:	02078863          	beqz	a5,80000898 <_Z24externalInterruptHandlerv+0xa0>
            char c=mmio<volatile uint8_t>(reg(RHR));
    8000086c:	00000513          	li	a0,0
    80000870:	71c000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000874:	00050793          	mv	a5,a0
    80000878:	fcf43823          	sd	a5,-48(s0)
    8000087c:	fd043783          	ld	a5,-48(s0)
    80000880:	0007c783          	lbu	a5,0(a5)
    80000884:	fef403a3          	sb	a5,-25(s0)
            // printf("%c",c);
            cnt++;
    80000888:	fec42783          	lw	a5,-20(s0)
    8000088c:	0017879b          	addiw	a5,a5,1
    80000890:	fef42623          	sw	a5,-20(s0)
        while(mmio<volatile lsr>(reg(LSR)).rxnemp){
    80000894:	fb5ff06f          	j	80000848 <_Z24externalInterruptHandlerv+0x50>
        }
        // for(char c;mmio<volatile lsr>(reg(LSR)).txidle && (c=IO::next())>0;)mmio<volatile uint8_t>(reg(THR))=c;
        if(cnt)printf("&%d|%d^",cnt,levelcnt);
    80000898:	fec42783          	lw	a5,-20(s0)
    8000089c:	0007879b          	sext.w	a5,a5
    800008a0:	02078463          	beqz	a5,800008c8 <_Z24externalInterruptHandlerv+0xd0>
    800008a4:	00005797          	auipc	a5,0x5
    800008a8:	abc78793          	addi	a5,a5,-1348 # 80005360 <_ZZ24externalInterruptHandlervE8levelcnt>
    800008ac:	0007a703          	lw	a4,0(a5)
    800008b0:	fec42783          	lw	a5,-20(s0)
    800008b4:	00070613          	mv	a2,a4
    800008b8:	00078593          	mv	a1,a5
    800008bc:	00001517          	auipc	a0,0x1
    800008c0:	0ac50513          	addi	a0,a0,172 # 80001968 <_ZL11syscallPtrs+0x50>
    800008c4:	6f1000ef          	jal	ra,800017b4 <printf>
    }
    plicComplete(irq);
    800008c8:	fe842783          	lw	a5,-24(s0)
    800008cc:	00078513          	mv	a0,a5
    800008d0:	ed1ff0ef          	jal	ra,800007a0 <_Z12plicCompletei>
    levelcnt--;
    800008d4:	00005797          	auipc	a5,0x5
    800008d8:	a8c78793          	addi	a5,a5,-1396 # 80005360 <_ZZ24externalInterruptHandlervE8levelcnt>
    800008dc:	0007a783          	lw	a5,0(a5)
    800008e0:	fff7879b          	addiw	a5,a5,-1
    800008e4:	0007871b          	sext.w	a4,a5
    800008e8:	00005797          	auipc	a5,0x5
    800008ec:	a7878793          	addi	a5,a5,-1416 # 80005360 <_ZZ24externalInterruptHandlervE8levelcnt>
    800008f0:	00e7a023          	sw	a4,0(a5)
}
    800008f4:	00000013          	nop
    800008f8:	02813083          	ld	ra,40(sp)
    800008fc:	02013403          	ld	s0,32(sp)
    80000900:	03010113          	addi	sp,sp,48
    80000904:	00008067          	ret

0000000080000908 <_ZL21timerInterruptHandlerv>:
static void timerInterruptHandler(){
    80000908:	fe010113          	addi	sp,sp,-32
    8000090c:	00113c23          	sd	ra,24(sp)
    80000910:	00813823          	sd	s0,16(sp)
    80000914:	02010413          	addi	s0,sp,32
    int hart=csr::hart();
    80000918:	0b1000ef          	jal	ra,800011c8 <_ZN3csr4hartEv>
    8000091c:	00050793          	mv	a5,a0
    80000920:	fef42623          	sw	a5,-20(s0)
    static int cnt=0;
    xlen_t time;csrRead(time,time);
    80000924:	c01027f3          	rdtime	a5
    80000928:	fef43023          	sd	a5,-32(s0)
    printf("timer Interrupt[%d]::%ld\n",cnt++,time);
    8000092c:	00005797          	auipc	a5,0x5
    80000930:	a3878793          	addi	a5,a5,-1480 # 80005364 <_ZZL21timerInterruptHandlervE3cnt>
    80000934:	0007a783          	lw	a5,0(a5)
    80000938:	0017871b          	addiw	a4,a5,1
    8000093c:	0007069b          	sext.w	a3,a4
    80000940:	00005717          	auipc	a4,0x5
    80000944:	a2470713          	addi	a4,a4,-1500 # 80005364 <_ZZL21timerInterruptHandlervE3cnt>
    80000948:	00d72023          	sw	a3,0(a4)
    8000094c:	fe043603          	ld	a2,-32(s0)
    80000950:	00078593          	mv	a1,a5
    80000954:	00001517          	auipc	a0,0x1
    80000958:	01c50513          	addi	a0,a0,28 # 80001970 <_ZL11syscallPtrs+0x58>
    8000095c:	659000ef          	jal	ra,800017b4 <printf>
    csrSet(mip,BIT(csr::mip::stip));
    80000960:	02000793          	li	a5,32
    80000964:	3447a073          	csrs	mip,a5
    csrClear(mie,BIT(csr::mie::mtie));
    80000968:	08000793          	li	a5,128
    8000096c:	3047b073          	csrc	mie,a5
}
    80000970:	00000013          	nop
    80000974:	01813083          	ld	ra,24(sp)
    80000978:	01013403          	ld	s0,16(sp)
    8000097c:	02010113          	addi	sp,sp,32
    80000980:	00008067          	ret

0000000080000984 <_ZL13secallHandlerv>:
static void secallHandler(){
    80000984:	fe010113          	addi	sp,sp,-32
    80000988:	00113c23          	sd	ra,24(sp)
    8000098c:	00813823          	sd	s0,16(sp)
    80000990:	02010413          	addi	s0,sp,32
    register int ecallId asm("a7");
    xlen_t &rtval=gpr[9];
    80000994:	00005797          	auipc	a5,0x5
    80000998:	92478793          	addi	a5,a5,-1756 # 800052b8 <_ZL3gpr+0x48>
    8000099c:	fef43423          	sd	a5,-24(s0)
    printf("secall [%d]\n",ecallId);
    800009a0:	0008879b          	sext.w	a5,a7
    800009a4:	00078593          	mv	a1,a5
    800009a8:	00001517          	auipc	a0,0x1
    800009ac:	fe850513          	addi	a0,a0,-24 # 80001990 <_ZL11syscallPtrs+0x78>
    800009b0:	605000ef          	jal	ra,800017b4 <printf>
    switch(ecallId){
    800009b4:	0008879b          	sext.w	a5,a7
    800009b8:	00078693          	mv	a3,a5
    800009bc:	00300713          	li	a4,3
    800009c0:	04e68c63          	beq	a3,a4,80000a18 <_ZL13secallHandlerv+0x94>
    800009c4:	00078693          	mv	a3,a5
    800009c8:	00300713          	li	a4,3
    800009cc:	06d74463          	blt	a4,a3,80000a34 <_ZL13secallHandlerv+0xb0>
    800009d0:	00078693          	mv	a3,a5
    800009d4:	00100713          	li	a4,1
    800009d8:	00e68a63          	beq	a3,a4,800009ec <_ZL13secallHandlerv+0x68>
    800009dc:	00078713          	mv	a4,a5
    800009e0:	00200793          	li	a5,2
    800009e4:	00f70c63          	beq	a4,a5,800009fc <_ZL13secallHandlerv+0x78>
    800009e8:	04c0006f          	j	80000a34 <_ZL13secallHandlerv+0xb0>
    using namespace sbi;
        case hart: csrRead(mhartid,rtval);break;
    800009ec:	f1402773          	csrr	a4,mhartid
    800009f0:	fe843783          	ld	a5,-24(s0)
    800009f4:	00e7b023          	sd	a4,0(a5)
    800009f8:	04c0006f          	j	80000a44 <_ZL13secallHandlerv+0xc0>
        case xtie: csrSet(mie,BIT(csr::mie::mtie));csrClear(mip,BIT(csr::mip::stip));rtval=0;break;
    800009fc:	08000793          	li	a5,128
    80000a00:	3047a073          	csrs	mie,a5
    80000a04:	02000793          	li	a5,32
    80000a08:	3447b073          	csrc	mip,a5
    80000a0c:	fe843783          	ld	a5,-24(s0)
    80000a10:	0007b023          	sd	zero,0(a5)
    80000a14:	0300006f          	j	80000a44 <_ZL13secallHandlerv+0xc0>
        case xsie: csrSet(mie,BIT(csr::mie::msie));csrClear(mip,BIT(csr::mip::ssip));rtval=0;break;
    80000a18:	00800793          	li	a5,8
    80000a1c:	3047a073          	csrs	mie,a5
    80000a20:	00200793          	li	a5,2
    80000a24:	3447b073          	csrc	mip,a5
    80000a28:	fe843783          	ld	a5,-24(s0)
    80000a2c:	0007b023          	sd	zero,0(a5)
    80000a30:	0140006f          	j	80000a44 <_ZL13secallHandlerv+0xc0>
        default: rtval=1;
    80000a34:	fe843783          	ld	a5,-24(s0)
    80000a38:	00100713          	li	a4,1
    80000a3c:	00e7b023          	sd	a4,0(a5)
    }
}
    80000a40:	00000013          	nop
    80000a44:	00000013          	nop
    80000a48:	01813083          	ld	ra,24(sp)
    80000a4c:	01013403          	ld	s0,16(sp)
    80000a50:	02010113          	addi	sp,sp,32
    80000a54:	00008067          	ret

0000000080000a58 <mtraphandler>:
// extern "C" __attribute__((interrupt("machine"))) void mtraphandler(){
extern "C" void mtraphandler(){
    80000a58:	fe010113          	addi	sp,sp,-32
    80000a5c:	00113c23          	sd	ra,24(sp)
    80000a60:	00813823          	sd	s0,16(sp)
    80000a64:	02010413          	addi	s0,sp,32
    ptr_t mepc; csrRead(mepc,mepc);
    80000a68:	341027f3          	csrr	a5,mepc
    80000a6c:	fef43423          	sd	a5,-24(s0)
    xlen_t mcause; csrRead(mcause,mcause);
    80000a70:	342027f3          	csrr	a5,mcause
    80000a74:	fef43023          	sd	a5,-32(s0)
    // csr::currentMode();
    // printf("mtraphandler cause=[%d]%d mepc=%lx\n",isInterrupt(mcause),mcause<<1>>1,mepc);

    if(csr::mcause::isInterrupt(mcause)){
    80000a78:	fe043503          	ld	a0,-32(s0)
    80000a7c:	bd9ff0ef          	jal	ra,80000654 <_ZN3csr6mcause11isInterruptEm>
    80000a80:	00050793          	mv	a5,a0
    80000a84:	04078063          	beqz	a5,80000ac4 <mtraphandler+0x6c>
        switch(mcause<<1>>1){
    80000a88:	fe043703          	ld	a4,-32(s0)
    80000a8c:	fff00793          	li	a5,-1
    80000a90:	0017d793          	srli	a5,a5,0x1
    80000a94:	00f777b3          	and	a5,a4,a5
    80000a98:	00700713          	li	a4,7
    80000a9c:	00e78863          	beq	a5,a4,80000aac <mtraphandler+0x54>
    80000aa0:	00b00713          	li	a4,11
    80000aa4:	00e78863          	beq	a5,a4,80000ab4 <mtraphandler+0x5c>
    80000aa8:	0140006f          	j	80000abc <mtraphandler+0x64>
            // case msi: break;

            // case uti: break;
            // case sti: break;
            // case hti: break;
            case mti: timerInterruptHandler();break;
    80000aac:	e5dff0ef          	jal	ra,80000908 <_ZL21timerInterruptHandlerv>
    80000ab0:	0740006f          	j	80000b24 <mtraphandler+0xcc>

            // case uei: break;
            // case sei: break;
            // case hei: break;
            case mei: externalInterruptHandler();break;
    80000ab4:	d45ff0ef          	jal	ra,800007f8 <_Z24externalInterruptHandlerv>
    80000ab8:	06c0006f          	j	80000b24 <mtraphandler+0xcc>
            default:
                halt();
    80000abc:	5a9000ef          	jal	ra,80001864 <halt>
                printf("exception%d\n",mcause);
                halt();
        }
    }
    // printf("mtraphandler over\n");
}
    80000ac0:	0640006f          	j	80000b24 <mtraphandler+0xcc>
        switch(mcause){
    80000ac4:	fe043703          	ld	a4,-32(s0)
    80000ac8:	00700793          	li	a5,7
    80000acc:	02f70263          	beq	a4,a5,80000af0 <mtraphandler+0x98>
    80000ad0:	fe043703          	ld	a4,-32(s0)
    80000ad4:	00900793          	li	a5,9
    80000ad8:	02f71463          	bne	a4,a5,80000b00 <mtraphandler+0xa8>
            case secall:secallHandler();csrWrite(mepc,mepc+4);break;
    80000adc:	ea9ff0ef          	jal	ra,80000984 <_ZL13secallHandlerv>
    80000ae0:	fe843783          	ld	a5,-24(s0)
    80000ae4:	00478793          	addi	a5,a5,4
    80000ae8:	34179073          	csrw	mepc,a5
    80000aec:	0380006f          	j	80000b24 <mtraphandler+0xcc>
            case storeAccessFault:csrWrite(mepc,mepc+4);break;
    80000af0:	fe843783          	ld	a5,-24(s0)
    80000af4:	00478793          	addi	a5,a5,4
    80000af8:	34179073          	csrw	mepc,a5
    80000afc:	0280006f          	j	80000b24 <mtraphandler+0xcc>
                csrWrite(mepc,mepc+4);
    80000b00:	fe843783          	ld	a5,-24(s0)
    80000b04:	00478793          	addi	a5,a5,4
    80000b08:	34179073          	csrw	mepc,a5
                printf("exception%d\n",mcause);
    80000b0c:	fe043583          	ld	a1,-32(s0)
    80000b10:	00001517          	auipc	a0,0x1
    80000b14:	e9050513          	addi	a0,a0,-368 # 800019a0 <_ZL11syscallPtrs+0x88>
    80000b18:	49d000ef          	jal	ra,800017b4 <printf>
                halt();
    80000b1c:	549000ef          	jal	ra,80001864 <halt>
}
    80000b20:	0040006f          	j	80000b24 <mtraphandler+0xcc>
    80000b24:	00000013          	nop
    80000b28:	01813083          	ld	ra,24(sp)
    80000b2c:	01013403          	ld	s0,16(sp)
    80000b30:	02010113          	addi	sp,sp,32
    80000b34:	00008067          	ret

0000000080000b38 <mtrapwrapper>:
extern "C" __attribute__((naked)) void mtrapwrapper(){
    csrSwap(mscratch,t6);
    80000b38:	340f9ff3          	csrrw	t6,mscratch,t6
    saveContext();
    80000b3c:	001fb023          	sd	ra,0(t6)
    80000b40:	002fb423          	sd	sp,8(t6)
    80000b44:	003fb823          	sd	gp,16(t6)
    80000b48:	004fbc23          	sd	tp,24(t6)
    80000b4c:	025fb023          	sd	t0,32(t6)
    80000b50:	026fb423          	sd	t1,40(t6)
    80000b54:	027fb823          	sd	t2,48(t6)
    80000b58:	028fbc23          	sd	s0,56(t6)
    80000b5c:	049fb023          	sd	s1,64(t6)
    80000b60:	04afb423          	sd	a0,72(t6)
    80000b64:	04bfb823          	sd	a1,80(t6)
    80000b68:	04cfbc23          	sd	a2,88(t6)
    80000b6c:	06dfb023          	sd	a3,96(t6)
    80000b70:	06efb423          	sd	a4,104(t6)
    80000b74:	06ffb823          	sd	a5,112(t6)
    80000b78:	070fbc23          	sd	a6,120(t6)
    80000b7c:	091fb023          	sd	a7,128(t6)
    80000b80:	092fb423          	sd	s2,136(t6)
    80000b84:	093fb823          	sd	s3,144(t6)
    80000b88:	094fbc23          	sd	s4,152(t6)
    80000b8c:	0b5fb023          	sd	s5,160(t6)
    80000b90:	0b6fb423          	sd	s6,168(t6)
    80000b94:	0b7fb823          	sd	s7,176(t6)
    80000b98:	0b8fbc23          	sd	s8,184(t6)
    80000b9c:	0d9fb023          	sd	s9,192(t6)
    80000ba0:	0dafb423          	sd	s10,200(t6)
    80000ba4:	0dbfb823          	sd	s11,208(t6)
    80000ba8:	0dcfbc23          	sd	t3,216(t6)
    80000bac:	0fdfb023          	sd	t4,224(t6)
    80000bb0:	0fefb423          	sd	t5,232(t6)
    mtraphandler();
    80000bb4:	ea5ff0ef          	jal	ra,80000a58 <mtraphandler>
    restoreContext();
    80000bb8:	000fb083          	ld	ra,0(t6)
    80000bbc:	008fb103          	ld	sp,8(t6)
    80000bc0:	010fb183          	ld	gp,16(t6)
    80000bc4:	018fb203          	ld	tp,24(t6)
    80000bc8:	020fb283          	ld	t0,32(t6)
    80000bcc:	028fb303          	ld	t1,40(t6)
    80000bd0:	030fb383          	ld	t2,48(t6)
    80000bd4:	038fb403          	ld	s0,56(t6)
    80000bd8:	040fb483          	ld	s1,64(t6)
    80000bdc:	048fb503          	ld	a0,72(t6)
    80000be0:	050fb583          	ld	a1,80(t6)
    80000be4:	058fb603          	ld	a2,88(t6)
    80000be8:	060fb683          	ld	a3,96(t6)
    80000bec:	068fb703          	ld	a4,104(t6)
    80000bf0:	070fb783          	ld	a5,112(t6)
    80000bf4:	078fb803          	ld	a6,120(t6)
    80000bf8:	080fb883          	ld	a7,128(t6)
    80000bfc:	088fb903          	ld	s2,136(t6)
    80000c00:	090fb983          	ld	s3,144(t6)
    80000c04:	098fba03          	ld	s4,152(t6)
    80000c08:	0a0fba83          	ld	s5,160(t6)
    80000c0c:	0a8fbb03          	ld	s6,168(t6)
    80000c10:	0b0fbb83          	ld	s7,176(t6)
    80000c14:	0b8fbc03          	ld	s8,184(t6)
    80000c18:	0c0fbc83          	ld	s9,192(t6)
    80000c1c:	0c8fbd03          	ld	s10,200(t6)
    80000c20:	0d0fbd83          	ld	s11,208(t6)
    80000c24:	0d8fbe03          	ld	t3,216(t6)
    80000c28:	0e0fbe83          	ld	t4,224(t6)
    80000c2c:	0e8fbf03          	ld	t5,232(t6)
    csrSwap(mscratch,t6);
    80000c30:	340f9ff3          	csrrw	t6,mscratch,t6
    ExecInst(mret);
    80000c34:	30200073          	mret
}
    80000c38:	00000013          	nop

0000000080000c3c <_Z11uartIntTestv>:
void uartIntTest(){
    80000c3c:	fe010113          	addi	sp,sp,-32
    80000c40:	00113c23          	sd	ra,24(sp)
    80000c44:	00813823          	sd	s0,16(sp)
    80000c48:	02010413          	addi	s0,sp,32
    using namespace platform::uart0::nonblocking;
    for(int i=1024;i;i--)putc('_');
    80000c4c:	40000793          	li	a5,1024
    80000c50:	fef42623          	sw	a5,-20(s0)
    80000c54:	fec42783          	lw	a5,-20(s0)
    80000c58:	0007879b          	sext.w	a5,a5
    80000c5c:	00078e63          	beqz	a5,80000c78 <_Z11uartIntTestv+0x3c>
    80000c60:	05f00513          	li	a0,95
    80000c64:	3d8000ef          	jal	ra,8000103c <_ZN8platform5uart011nonblocking4putcEc>
    80000c68:	fec42783          	lw	a5,-20(s0)
    80000c6c:	fff7879b          	addiw	a5,a5,-1
    80000c70:	fef42623          	sw	a5,-20(s0)
    80000c74:	fe1ff06f          	j	80000c54 <_Z11uartIntTestv+0x18>
    // 0123456789abcdefg0123456789abcdefg0123456789abcdefg0123456789abcdefg0123456789abcdefg0123456789abcdefg0123456789abcdefg0123456789abcdefg
}
    80000c78:	00000013          	nop
    80000c7c:	01813083          	ld	ra,24(sp)
    80000c80:	01013403          	ld	s0,16(sp)
    80000c84:	02010113          	addi	sp,sp,32
    80000c88:	00008067          	ret

0000000080000c8c <_Z8uartInitv>:
void uartInit(){
    80000c8c:	fb010113          	addi	sp,sp,-80
    80000c90:	04113423          	sd	ra,72(sp)
    80000c94:	04813023          	sd	s0,64(sp)
    80000c98:	05010413          	addi	s0,sp,80
    using namespace platform::uart0;
    auto &ier=mmio<volatile uint8_t>(reg(IER));
    80000c9c:	00100513          	li	a0,1
    80000ca0:	2ec000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000ca4:	00050793          	mv	a5,a0
    80000ca8:	faf43c23          	sd	a5,-72(s0)
    80000cac:	fb843783          	ld	a5,-72(s0)
    80000cb0:	fef43423          	sd	a5,-24(s0)
    ier=0x00;
    80000cb4:	fe843783          	ld	a5,-24(s0)
    80000cb8:	00078023          	sb	zero,0(a5)
    puts("Hello Uart\n");
    80000cbc:	00004797          	auipc	a5,0x4
    80000cc0:	34478793          	addi	a5,a5,836 # 80005000 <puts>
    80000cc4:	0007b783          	ld	a5,0(a5)
    80000cc8:	00001517          	auipc	a0,0x1
    80000ccc:	ce850513          	addi	a0,a0,-792 # 800019b0 <_ZL11syscallPtrs+0x98>
    80000cd0:	000780e7          	jalr	a5
    auto &lcr=mmio<volatile uint8_t>(reg(LCR));
    80000cd4:	00300513          	li	a0,3
    80000cd8:	2b4000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000cdc:	00050793          	mv	a5,a0
    80000ce0:	fcf43023          	sd	a5,-64(s0)
    80000ce4:	fc043783          	ld	a5,-64(s0)
    80000ce8:	fef43023          	sd	a5,-32(s0)
    lcr=lcr|(1<<7);
    80000cec:	fe043783          	ld	a5,-32(s0)
    80000cf0:	0007c783          	lbu	a5,0(a5)
    80000cf4:	0ff7f793          	andi	a5,a5,255
    80000cf8:	f807e793          	ori	a5,a5,-128
    80000cfc:	0ff7f713          	andi	a4,a5,255
    80000d00:	fe043783          	ld	a5,-32(s0)
    80000d04:	00e78023          	sb	a4,0(a5)
    mmio<volatile uint8_t>(reg(DLL))=0x03;
    80000d08:	00000513          	li	a0,0
    80000d0c:	280000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000d10:	00050793          	mv	a5,a0
    80000d14:	fcf43423          	sd	a5,-56(s0)
    80000d18:	fc843783          	ld	a5,-56(s0)
    80000d1c:	00300713          	li	a4,3
    80000d20:	00e78023          	sb	a4,0(a5)
    mmio<volatile uint8_t>(reg(DLM))=0x00;
    80000d24:	00100513          	li	a0,1
    80000d28:	264000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000d2c:	00050793          	mv	a5,a0
    80000d30:	fcf43823          	sd	a5,-48(s0)
    80000d34:	fd043783          	ld	a5,-48(s0)
    80000d38:	00078023          	sb	zero,0(a5)
    lcr=3;
    80000d3c:	fe043783          	ld	a5,-32(s0)
    80000d40:	00300713          	li	a4,3
    80000d44:	00e78023          	sb	a4,0(a5)
    mmio<volatile uint8_t>(reg(FCR))=0x7|(0x3<<6);
    80000d48:	00200513          	li	a0,2
    80000d4c:	240000ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000d50:	00050793          	mv	a5,a0
    80000d54:	fcf43c23          	sd	a5,-40(s0)
    80000d58:	fd843783          	ld	a5,-40(s0)
    80000d5c:	fc700713          	li	a4,-57
    80000d60:	00e78023          	sb	a4,0(a5)
    ier=0x01;
    80000d64:	fe843783          	ld	a5,-24(s0)
    80000d68:	00100713          	li	a4,1
    80000d6c:	00e78023          	sb	a4,0(a5)
    // puts=IO::_nonblockingputs;
}
    80000d70:	00000013          	nop
    80000d74:	04813083          	ld	ra,72(sp)
    80000d78:	04013403          	ld	s0,64(sp)
    80000d7c:	05010113          	addi	sp,sp,80
    80000d80:	00008067          	ret

0000000080000d84 <_Z8plicInitv>:
void plicInit(){
    80000d84:	fc010113          	addi	sp,sp,-64
    80000d88:	02113c23          	sd	ra,56(sp)
    80000d8c:	02813823          	sd	s0,48(sp)
    80000d90:	04010413          	addi	s0,sp,64
    // int hart=csr::hart();
    using namespace platform::plic;
    int hart=csr::hart();
    80000d94:	434000ef          	jal	ra,800011c8 <_ZN3csr4hartEv>
    80000d98:	00050793          	mv	a5,a0
    80000d9c:	fef42623          	sw	a5,-20(s0)
    xlen_t addr=priorityOf(platform::uart0::irq);
    80000da0:	0c0007b7          	lui	a5,0xc000
    80000da4:	02878793          	addi	a5,a5,40 # c000028 <STACK_SIZE+0xbfffc28>
    80000da8:	fef43023          	sd	a5,-32(s0)
    80000dac:	fe043783          	ld	a5,-32(s0)
    80000db0:	fcf43423          	sd	a5,-56(s0)
    80000db4:	fc843783          	ld	a5,-56(s0)
    mmio<word_t>(addr)=1;
    80000db8:	00100713          	li	a4,1
    80000dbc:	00e7a023          	sw	a4,0(a5)
    mmio<word_t>(enableOf(hart))=1<<platform::uart0::irq;
    80000dc0:	fec42783          	lw	a5,-20(s0)
    80000dc4:	00078513          	mv	a0,a5
    80000dc8:	2f8000ef          	jal	ra,800010c0 <_ZN8platform4plic8enableOfEi>
    80000dcc:	00050793          	mv	a5,a0
    80000dd0:	fcf43823          	sd	a5,-48(s0)
    80000dd4:	fd043783          	ld	a5,-48(s0)
    80000dd8:	40000713          	li	a4,1024
    80000ddc:	00e7a023          	sw	a4,0(a5)
    mmio<word_t>(thresholdOf(hart))=0;
    80000de0:	fec42783          	lw	a5,-20(s0)
    80000de4:	00078513          	mv	a0,a5
    80000de8:	314000ef          	jal	ra,800010fc <_ZN8platform4plic11thresholdOfEi>
    80000dec:	00050793          	mv	a5,a0
    80000df0:	fcf43c23          	sd	a5,-40(s0)
    80000df4:	fd843783          	ld	a5,-40(s0)
    80000df8:	0007a023          	sw	zero,0(a5)
    uartInit();
    80000dfc:	e91ff0ef          	jal	ra,80000c8c <_Z8uartInitv>
}
    80000e00:	00000013          	nop
    80000e04:	03813083          	ld	ra,56(sp)
    80000e08:	03013403          	ld	s0,48(sp)
    80000e0c:	04010113          	addi	sp,sp,64
    80000e10:	00008067          	ret

0000000080000e14 <_Z9timerInitv>:
void timerInit(){
    80000e14:	fe010113          	addi	sp,sp,-32
    80000e18:	00113c23          	sd	ra,24(sp)
    80000e1c:	00813823          	sd	s0,16(sp)
    80000e20:	02010413          	addi	s0,sp,32
    int hart=csr::hart();
    80000e24:	3a4000ef          	jal	ra,800011c8 <_ZN3csr4hartEv>
    80000e28:	00050793          	mv	a5,a0
    80000e2c:	fef42623          	sw	a5,-20(s0)
    mmio<xlen_t>(platform::clint::mtimecmpOf(hart))=TIMER_INTERVAL;
    80000e30:	fec42783          	lw	a5,-20(s0)
    80000e34:	00078513          	mv	a0,a5
    80000e38:	fe0ff0ef          	jal	ra,80000618 <_ZN8platform5clint10mtimecmpOfEi>
    80000e3c:	00050793          	mv	a5,a0
    80000e40:	fef43023          	sd	a5,-32(s0)
    80000e44:	fe043783          	ld	a5,-32(s0)
    80000e48:	004c5737          	lui	a4,0x4c5
    80000e4c:	b4070713          	addi	a4,a4,-1216 # 4c4b40 <STACK_SIZE+0x4c4740>
    80000e50:	00e7b023          	sd	a4,0(a5)
    csrSet(mie,BIT(csr::mie::mtie));
    80000e54:	08000793          	li	a5,128
    80000e58:	3047a073          	csrs	mie,a5
}
    80000e5c:	00000013          	nop
    80000e60:	01813083          	ld	ra,24(sp)
    80000e64:	01013403          	ld	s0,16(sp)
    80000e68:	02010113          	addi	sp,sp,32
    80000e6c:	00008067          	ret

0000000080000e70 <_Z10mtrap_testv>:
void mtrap_test(){
    80000e70:	fe010113          	addi	sp,sp,-32
    80000e74:	00113c23          	sd	ra,24(sp)
    80000e78:	00813823          	sd	s0,16(sp)
    80000e7c:	02010413          	addi	s0,sp,32
    *(int *)0x00000000 = 100;
    80000e80:	00000713          	li	a4,0
    80000e84:	06400793          	li	a5,100
    80000e88:	00f72023          	sw	a5,0(a4)
    puts("mtrap test over");
    80000e8c:	00004797          	auipc	a5,0x4
    80000e90:	17478793          	addi	a5,a5,372 # 80005000 <puts>
    80000e94:	0007b783          	ld	a5,0(a5)
    80000e98:	00001517          	auipc	a0,0x1
    80000e9c:	b2850513          	addi	a0,a0,-1240 # 800019c0 <_ZL11syscallPtrs+0xa8>
    80000ea0:	000780e7          	jalr	a5
    for(int k=2;k;k--);
    80000ea4:	00200793          	li	a5,2
    80000ea8:	fef42623          	sw	a5,-20(s0)
    80000eac:	fec42783          	lw	a5,-20(s0)
    80000eb0:	0007879b          	sext.w	a5,a5
    80000eb4:	00078a63          	beqz	a5,80000ec8 <_Z10mtrap_testv+0x58>
    80000eb8:	fec42783          	lw	a5,-20(s0)
    80000ebc:	fff7879b          	addiw	a5,a5,-1
    80000ec0:	fef42623          	sw	a5,-20(s0)
    80000ec4:	fe9ff06f          	j	80000eac <_Z10mtrap_testv+0x3c>
    return;
    80000ec8:	00000013          	nop
}
    80000ecc:	01813083          	ld	ra,24(sp)
    80000ed0:	01013403          	ld	s0,16(sp)
    80000ed4:	02010113          	addi	sp,sp,32
    80000ed8:	00008067          	ret

0000000080000edc <sbi_init>:
extern "C" void sbi_init(){
    80000edc:	ff010113          	addi	sp,sp,-16
    80000ee0:	00113423          	sd	ra,8(sp)
    80000ee4:	00813023          	sd	s0,0(sp)
    80000ee8:	01010413          	addi	s0,sp,16
//     asm volatile (
// "csrw pmpaddr0, %1\n\t"
// "csrw pmpcfg0, %0\n\t"
// : : "r" (0xf), "r" (0x3fffffffffffffull) :);
    // csrWritei(mtvec,mtraphandler);
    puts=IO::_blockingputs;
    80000eec:	00004797          	auipc	a5,0x4
    80000ef0:	11478793          	addi	a5,a5,276 # 80005000 <puts>
    80000ef4:	00000717          	auipc	a4,0x0
    80000ef8:	28470713          	addi	a4,a4,644 # 80001178 <_ZN2IO13_blockingputsEPKc>
    80000efc:	00e7b023          	sd	a4,0(a5)
    plicInit();
    80000f00:	e85ff0ef          	jal	ra,80000d84 <_Z8plicInitv>
    puts("plic init over\n");
    80000f04:	00004797          	auipc	a5,0x4
    80000f08:	0fc78793          	addi	a5,a5,252 # 80005000 <puts>
    80000f0c:	0007b783          	ld	a5,0(a5)
    80000f10:	00001517          	auipc	a0,0x1
    80000f14:	ac050513          	addi	a0,a0,-1344 # 800019d0 <_ZL11syscallPtrs+0xb8>
    80000f18:	000780e7          	jalr	a5

    csrWrite(mscratch,gpr);
    80000f1c:	00004797          	auipc	a5,0x4
    80000f20:	35478793          	addi	a5,a5,852 # 80005270 <_ZL3gpr>
    80000f24:	34079073          	csrw	mscratch,a5
    {asm volatile ("csrw ""mtvec"", %0" :: "r"(mtrapwrapper));}
    80000f28:	00000797          	auipc	a5,0x0
    80000f2c:	c1078793          	addi	a5,a5,-1008 # 80000b38 <mtrapwrapper>
    80000f30:	30579073          	csrw	mtvec,a5
    csrSet(mie,BIT(csr::mie::meie));
    80000f34:	000017b7          	lui	a5,0x1
    80000f38:	80078793          	addi	a5,a5,-2048 # 800 <STACK_SIZE+0x400>
    80000f3c:	3047a073          	csrs	mie,a5
    // csrSet(mstatus,BIT(csr::mstatus::mie));
    // mtrap_test();
    uartIntTest();
    80000f40:	cfdff0ef          	jal	ra,80000c3c <_Z11uartIntTestv>

    // timerInit();
    csrSet(mideleg,BIT(csr::mie::stie)|BIT(csr::mie::ssie));
    80000f44:	02200793          	li	a5,34
    80000f48:	3037a073          	csrs	mideleg,a5
    csrSet(medeleg,BIT(csr::mcause::uecall));
    80000f4c:	10000793          	li	a5,256
    80000f50:	3027a073          	csrs	medeleg,a5
    csrSet(mie,BIT(csr::mie::mtie));
    80000f54:	08000793          	li	a5,128
    80000f58:	3047a073          	csrs	mie,a5
    csrSet(mstatus,1l<<csr::mstatus::mpp);
    80000f5c:	000017b7          	lui	a5,0x1
    80000f60:	80078793          	addi	a5,a5,-2048 # 800 <STACK_SIZE+0x400>
    80000f64:	3007a073          	csrs	mstatus,a5
    csrWrite(mepc,start_kernel);
    80000f68:	fffff797          	auipc	a5,0xfffff
    80000f6c:	61078793          	addi	a5,a5,1552 # 80000578 <start_kernel>
    80000f70:	34179073          	csrw	mepc,a5
    ExecInst(mret);
    80000f74:	30200073          	mret
    80000f78:	00000013          	nop
    80000f7c:	00813083          	ld	ra,8(sp)
    80000f80:	00013403          	ld	s0,0(sp)
    80000f84:	01010113          	addi	sp,sp,16
    80000f88:	00008067          	ret

0000000080000f8c <_ZN8platform5uart03regENS0_4regsE>:
        constexpr xlen_t reg(regs r){return base+r;}
    80000f8c:	fe010113          	addi	sp,sp,-32
    80000f90:	00813c23          	sd	s0,24(sp)
    80000f94:	02010413          	addi	s0,sp,32
    80000f98:	00050793          	mv	a5,a0
    80000f9c:	fef42623          	sw	a5,-20(s0)
    80000fa0:	fec42783          	lw	a5,-20(s0)
    80000fa4:	00078713          	mv	a4,a5
    80000fa8:	100007b7          	lui	a5,0x10000
    80000fac:	00f707b3          	add	a5,a4,a5
    80000fb0:	00078513          	mv	a0,a5
    80000fb4:	01813403          	ld	s0,24(sp)
    80000fb8:	02010113          	addi	sp,sp,32
    80000fbc:	00008067          	ret

0000000080000fc0 <_ZN8platform5uart08blocking4putcEc>:
            inline void putc(char c) {
    80000fc0:	fd010113          	addi	sp,sp,-48
    80000fc4:	02113423          	sd	ra,40(sp)
    80000fc8:	02813023          	sd	s0,32(sp)
    80000fcc:	03010413          	addi	s0,sp,48
    80000fd0:	00050793          	mv	a5,a0
    80000fd4:	fcf40fa3          	sb	a5,-33(s0)
                while(!mmio<lsr>(reg(LSR)).txidle);
    80000fd8:	00500513          	li	a0,5
    80000fdc:	fb1ff0ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80000fe0:	00050793          	mv	a5,a0
    80000fe4:	fef43423          	sd	a5,-24(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    80000fe8:	fe843783          	ld	a5,-24(s0)
                while(!mmio<lsr>(reg(LSR)).txidle);
    80000fec:	0007c783          	lbu	a5,0(a5) # 10000000 <STACK_SIZE+0xffffc00>
    80000ff0:	0207f793          	andi	a5,a5,32
    80000ff4:	0ff7f793          	andi	a5,a5,255
    80000ff8:	0007879b          	sext.w	a5,a5
    80000ffc:	0017b793          	seqz	a5,a5
    80001000:	0ff7f793          	andi	a5,a5,255
    80001004:	00078463          	beqz	a5,8000100c <_ZN8platform5uart08blocking4putcEc+0x4c>
    80001008:	fd1ff06f          	j	80000fd8 <_ZN8platform5uart08blocking4putcEc+0x18>
                mmio<char>(reg(THR))=c;
    8000100c:	00000513          	li	a0,0
    80001010:	f7dff0ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80001014:	00050793          	mv	a5,a0
    80001018:	fef43023          	sd	a5,-32(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    8000101c:	fe043783          	ld	a5,-32(s0)
                mmio<char>(reg(THR))=c;
    80001020:	fdf44703          	lbu	a4,-33(s0)
    80001024:	00e78023          	sb	a4,0(a5)
            }
    80001028:	00000013          	nop
    8000102c:	02813083          	ld	ra,40(sp)
    80001030:	02013403          	ld	s0,32(sp)
    80001034:	03010113          	addi	sp,sp,48
    80001038:	00008067          	ret

000000008000103c <_ZN8platform5uart011nonblocking4putcEc>:
            inline bool putc(char c){
    8000103c:	fd010113          	addi	sp,sp,-48
    80001040:	02113423          	sd	ra,40(sp)
    80001044:	02813023          	sd	s0,32(sp)
    80001048:	03010413          	addi	s0,sp,48
    8000104c:	00050793          	mv	a5,a0
    80001050:	fcf40fa3          	sb	a5,-33(s0)
                if(!mmio<lsr>(reg(LSR)).txidle)return false;
    80001054:	00500513          	li	a0,5
    80001058:	f35ff0ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    8000105c:	00050793          	mv	a5,a0
    80001060:	fef43423          	sd	a5,-24(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    80001064:	fe843783          	ld	a5,-24(s0)
                if(!mmio<lsr>(reg(LSR)).txidle)return false;
    80001068:	0007c783          	lbu	a5,0(a5)
    8000106c:	0207f793          	andi	a5,a5,32
    80001070:	0ff7f793          	andi	a5,a5,255
    80001074:	0007879b          	sext.w	a5,a5
    80001078:	0017b793          	seqz	a5,a5
    8000107c:	0ff7f793          	andi	a5,a5,255
    80001080:	00078663          	beqz	a5,8000108c <_ZN8platform5uart011nonblocking4putcEc+0x50>
    80001084:	00000793          	li	a5,0
    80001088:	0240006f          	j	800010ac <_ZN8platform5uart011nonblocking4putcEc+0x70>
                mmio<char>(reg(THR))=c;
    8000108c:	00000513          	li	a0,0
    80001090:	efdff0ef          	jal	ra,80000f8c <_ZN8platform5uart03regENS0_4regsE>
    80001094:	00050793          	mv	a5,a0
    80001098:	fef43023          	sd	a5,-32(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    8000109c:	fe043783          	ld	a5,-32(s0)
                mmio<char>(reg(THR))=c;
    800010a0:	fdf44703          	lbu	a4,-33(s0)
    800010a4:	00e78023          	sb	a4,0(a5)
                return true;
    800010a8:	00100793          	li	a5,1
            }
    800010ac:	00078513          	mv	a0,a5
    800010b0:	02813083          	ld	ra,40(sp)
    800010b4:	02013403          	ld	s0,32(sp)
    800010b8:	03010113          	addi	sp,sp,48
    800010bc:	00008067          	ret

00000000800010c0 <_ZN8platform4plic8enableOfEi>:
        constexpr xlen_t enableOf(int hart) { return enable+hart*0x80; }
    800010c0:	fe010113          	addi	sp,sp,-32
    800010c4:	00813c23          	sd	s0,24(sp)
    800010c8:	02010413          	addi	s0,sp,32
    800010cc:	00050793          	mv	a5,a0
    800010d0:	fef42623          	sw	a5,-20(s0)
    800010d4:	fec42783          	lw	a5,-20(s0)
    800010d8:	0077979b          	slliw	a5,a5,0x7
    800010dc:	0007879b          	sext.w	a5,a5
    800010e0:	00078713          	mv	a4,a5
    800010e4:	0c0027b7          	lui	a5,0xc002
    800010e8:	00f707b3          	add	a5,a4,a5
    800010ec:	00078513          	mv	a0,a5
    800010f0:	01813403          	ld	s0,24(sp)
    800010f4:	02010113          	addi	sp,sp,32
    800010f8:	00008067          	ret

00000000800010fc <_ZN8platform4plic11thresholdOfEi>:
        constexpr xlen_t thresholdOf(int hart) { return threshold+hart*0x1000; }
    800010fc:	fe010113          	addi	sp,sp,-32
    80001100:	00813c23          	sd	s0,24(sp)
    80001104:	02010413          	addi	s0,sp,32
    80001108:	00050793          	mv	a5,a0
    8000110c:	fef42623          	sw	a5,-20(s0)
    80001110:	fec42783          	lw	a5,-20(s0)
    80001114:	00c7979b          	slliw	a5,a5,0xc
    80001118:	0007879b          	sext.w	a5,a5
    8000111c:	00078713          	mv	a4,a5
    80001120:	0c2007b7          	lui	a5,0xc200
    80001124:	00f707b3          	add	a5,a4,a5
    80001128:	00078513          	mv	a0,a5
    8000112c:	01813403          	ld	s0,24(sp)
    80001130:	02010113          	addi	sp,sp,32
    80001134:	00008067          	ret

0000000080001138 <_ZN8platform4plic7claimOfEi>:
        constexpr xlen_t claimOf(int hart) { return claim+hart*0x1000; }
    80001138:	fe010113          	addi	sp,sp,-32
    8000113c:	00813c23          	sd	s0,24(sp)
    80001140:	02010413          	addi	s0,sp,32
    80001144:	00050793          	mv	a5,a0
    80001148:	fef42623          	sw	a5,-20(s0)
    8000114c:	fec42783          	lw	a5,-20(s0)
    80001150:	00c7979b          	slliw	a5,a5,0xc
    80001154:	0007879b          	sext.w	a5,a5
    80001158:	00078713          	mv	a4,a5
    8000115c:	0c2007b7          	lui	a5,0xc200
    80001160:	00478793          	addi	a5,a5,4 # c200004 <STACK_SIZE+0xc1ffc04>
    80001164:	00f707b3          	add	a5,a4,a5
    80001168:	00078513          	mv	a0,a5
    8000116c:	01813403          	ld	s0,24(sp)
    80001170:	02010113          	addi	sp,sp,32
    80001174:	00008067          	ret

0000000080001178 <_ZN2IO13_blockingputsEPKc>:
};
static ringbuf<char> buf;

class IO{
public:
  inline static void _blockingputs(const char *s){
    80001178:	fe010113          	addi	sp,sp,-32
    8000117c:	00113c23          	sd	ra,24(sp)
    80001180:	00813823          	sd	s0,16(sp)
    80001184:	02010413          	addi	s0,sp,32
    80001188:	fea43423          	sd	a0,-24(s0)
    while(*s)platform::uart0::blocking::putc(*s++);
    8000118c:	fe843783          	ld	a5,-24(s0)
    80001190:	0007c783          	lbu	a5,0(a5)
    80001194:	02078063          	beqz	a5,800011b4 <_ZN2IO13_blockingputsEPKc+0x3c>
    80001198:	fe843783          	ld	a5,-24(s0)
    8000119c:	00178713          	addi	a4,a5,1
    800011a0:	fee43423          	sd	a4,-24(s0)
    800011a4:	0007c783          	lbu	a5,0(a5)
    800011a8:	00078513          	mv	a0,a5
    800011ac:	e15ff0ef          	jal	ra,80000fc0 <_ZN8platform5uart08blocking4putcEc>
    800011b0:	fddff06f          	j	8000118c <_ZN2IO13_blockingputsEPKc+0x14>
  }
    800011b4:	00000013          	nop
    800011b8:	01813083          	ld	ra,24(sp)
    800011bc:	01013403          	ld	s0,16(sp)
    800011c0:	02010113          	addi	sp,sp,32
    800011c4:	00008067          	ret

00000000800011c8 <_ZN3csr4hartEv>:
            REPFIELD(ie)
            REPFIELD(pie)
            spp,mpp=11,
        };
    }
    inline int hart(){
    800011c8:	fe010113          	addi	sp,sp,-32
    800011cc:	00813c23          	sd	s0,24(sp)
    800011d0:	02010413          	addi	s0,sp,32
        int rt; csrRead(mhartid,rt);
    800011d4:	f14027f3          	csrr	a5,mhartid
    800011d8:	fef42623          	sw	a5,-20(s0)
        return rt;
    800011dc:	fec42783          	lw	a5,-20(s0)
    }
    800011e0:	00078513          	mv	a0,a5
    800011e4:	01813403          	ld	s0,24(sp)
    800011e8:	02010113          	addi	sp,sp,32
    800011ec:	00008067          	ret

00000000800011f0 <_vsnprintf>:

extern "C"{
void (*puts)(const char *s);

static int _vsnprintf(char * out, size_t n, const char* s, va_list vl)
{
    800011f0:	f8010113          	addi	sp,sp,-128
    800011f4:	06813c23          	sd	s0,120(sp)
    800011f8:	08010413          	addi	s0,sp,128
    800011fc:	f8a43c23          	sd	a0,-104(s0)
    80001200:	f8b43823          	sd	a1,-112(s0)
    80001204:	f8c43423          	sd	a2,-120(s0)
    80001208:	f8d43023          	sd	a3,-128(s0)
	int format = 0;
    8000120c:	fe042623          	sw	zero,-20(s0)
	int longarg = 0;
    80001210:	fe042423          	sw	zero,-24(s0)
	size_t pos = 0;
    80001214:	fe043023          	sd	zero,-32(s0)
	for (; *s; s++) {
    80001218:	f8843783          	ld	a5,-120(s0)
    8000121c:	0007c783          	lbu	a5,0(a5)
    80001220:	46078a63          	beqz	a5,80001694 <_vsnprintf+0x4a4>
		if (format) {
    80001224:	fec42783          	lw	a5,-20(s0)
    80001228:	0007879b          	sext.w	a5,a5
    8000122c:	3e078c63          	beqz	a5,80001624 <_vsnprintf+0x434>
			switch(*s) {
    80001230:	f8843783          	ld	a5,-120(s0)
    80001234:	0007c783          	lbu	a5,0(a5)
    80001238:	0007879b          	sext.w	a5,a5
    8000123c:	f9d7869b          	addiw	a3,a5,-99
    80001240:	0006871b          	sext.w	a4,a3
    80001244:	01500793          	li	a5,21
    80001248:	42e7ec63          	bltu	a5,a4,80001680 <_vsnprintf+0x490>
    8000124c:	02069793          	slli	a5,a3,0x20
    80001250:	0207d793          	srli	a5,a5,0x20
    80001254:	00279713          	slli	a4,a5,0x2
    80001258:	00000797          	auipc	a5,0x0
    8000125c:	78878793          	addi	a5,a5,1928 # 800019e0 <_ZL11syscallPtrs+0xc8>
    80001260:	00f707b3          	add	a5,a4,a5
    80001264:	0007a783          	lw	a5,0(a5)
    80001268:	0007871b          	sext.w	a4,a5
    8000126c:	00000797          	auipc	a5,0x0
    80001270:	77478793          	addi	a5,a5,1908 # 800019e0 <_ZL11syscallPtrs+0xc8>
    80001274:	00f707b3          	add	a5,a4,a5
    80001278:	00078067          	jr	a5
			case 'l': {
				longarg = 1;
    8000127c:	00100793          	li	a5,1
    80001280:	fef42423          	sw	a5,-24(s0)
				break;
    80001284:	4000006f          	j	80001684 <_vsnprintf+0x494>
			}
			case 'p': {
				longarg = 1;
    80001288:	00100793          	li	a5,1
    8000128c:	fef42423          	sw	a5,-24(s0)
				if (out && pos < n) {
    80001290:	f9843783          	ld	a5,-104(s0)
    80001294:	02078263          	beqz	a5,800012b8 <_vsnprintf+0xc8>
    80001298:	fe043703          	ld	a4,-32(s0)
    8000129c:	f9043783          	ld	a5,-112(s0)
    800012a0:	00f77c63          	bgeu	a4,a5,800012b8 <_vsnprintf+0xc8>
					out[pos] = '0';
    800012a4:	f9843703          	ld	a4,-104(s0)
    800012a8:	fe043783          	ld	a5,-32(s0)
    800012ac:	00f707b3          	add	a5,a4,a5
    800012b0:	03000713          	li	a4,48
    800012b4:	00e78023          	sb	a4,0(a5)
				}
				pos++;
    800012b8:	fe043783          	ld	a5,-32(s0)
    800012bc:	00178793          	addi	a5,a5,1
    800012c0:	fef43023          	sd	a5,-32(s0)
				if (out && pos < n) {
    800012c4:	f9843783          	ld	a5,-104(s0)
    800012c8:	02078263          	beqz	a5,800012ec <_vsnprintf+0xfc>
    800012cc:	fe043703          	ld	a4,-32(s0)
    800012d0:	f9043783          	ld	a5,-112(s0)
    800012d4:	00f77c63          	bgeu	a4,a5,800012ec <_vsnprintf+0xfc>
					out[pos] = 'x';
    800012d8:	f9843703          	ld	a4,-104(s0)
    800012dc:	fe043783          	ld	a5,-32(s0)
    800012e0:	00f707b3          	add	a5,a4,a5
    800012e4:	07800713          	li	a4,120
    800012e8:	00e78023          	sb	a4,0(a5)
				}
				pos++;
    800012ec:	fe043783          	ld	a5,-32(s0)
    800012f0:	00178793          	addi	a5,a5,1
    800012f4:	fef43023          	sd	a5,-32(s0)
			}
			case 'x': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
    800012f8:	fe842783          	lw	a5,-24(s0)
    800012fc:	0007879b          	sext.w	a5,a5
    80001300:	00078c63          	beqz	a5,80001318 <_vsnprintf+0x128>
    80001304:	f8043783          	ld	a5,-128(s0)
    80001308:	00878713          	addi	a4,a5,8
    8000130c:	f8e43023          	sd	a4,-128(s0)
    80001310:	0007b783          	ld	a5,0(a5)
    80001314:	0140006f          	j	80001328 <_vsnprintf+0x138>
    80001318:	f8043783          	ld	a5,-128(s0)
    8000131c:	00878713          	addi	a4,a5,8
    80001320:	f8e43023          	sd	a4,-128(s0)
    80001324:	0007a783          	lw	a5,0(a5)
    80001328:	faf43423          	sd	a5,-88(s0)
				int hexdigits = 2*(longarg ? sizeof(long) : sizeof(int))-1;
    8000132c:	fe842783          	lw	a5,-24(s0)
    80001330:	0007879b          	sext.w	a5,a5
    80001334:	00078663          	beqz	a5,80001340 <_vsnprintf+0x150>
    80001338:	00f00793          	li	a5,15
    8000133c:	0080006f          	j	80001344 <_vsnprintf+0x154>
    80001340:	00700793          	li	a5,7
    80001344:	faf42223          	sw	a5,-92(s0)
				for(int i = hexdigits; i >= 0; i--) {
    80001348:	fa442783          	lw	a5,-92(s0)
    8000134c:	fcf42e23          	sw	a5,-36(s0)
    80001350:	fdc42783          	lw	a5,-36(s0)
    80001354:	0007879b          	sext.w	a5,a5
    80001358:	0807cc63          	bltz	a5,800013f0 <_vsnprintf+0x200>
					int d = (num >> (4*i)) & 0xF;
    8000135c:	fdc42783          	lw	a5,-36(s0)
    80001360:	0027979b          	slliw	a5,a5,0x2
    80001364:	0007879b          	sext.w	a5,a5
    80001368:	fa843703          	ld	a4,-88(s0)
    8000136c:	40f757b3          	sra	a5,a4,a5
    80001370:	0007879b          	sext.w	a5,a5
    80001374:	00f7f793          	andi	a5,a5,15
    80001378:	faf42023          	sw	a5,-96(s0)
					if (out && pos < n) {
    8000137c:	f9843783          	ld	a5,-104(s0)
    80001380:	04078a63          	beqz	a5,800013d4 <_vsnprintf+0x1e4>
    80001384:	fe043703          	ld	a4,-32(s0)
    80001388:	f9043783          	ld	a5,-112(s0)
    8000138c:	04f77463          	bgeu	a4,a5,800013d4 <_vsnprintf+0x1e4>
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
    80001390:	fa042783          	lw	a5,-96(s0)
    80001394:	0007871b          	sext.w	a4,a5
    80001398:	00900793          	li	a5,9
    8000139c:	00e7cc63          	blt	a5,a4,800013b4 <_vsnprintf+0x1c4>
    800013a0:	fa042783          	lw	a5,-96(s0)
    800013a4:	0ff7f793          	andi	a5,a5,255
    800013a8:	0307879b          	addiw	a5,a5,48
    800013ac:	0ff7f793          	andi	a5,a5,255
    800013b0:	0140006f          	j	800013c4 <_vsnprintf+0x1d4>
    800013b4:	fa042783          	lw	a5,-96(s0)
    800013b8:	0ff7f793          	andi	a5,a5,255
    800013bc:	0577879b          	addiw	a5,a5,87
    800013c0:	0ff7f793          	andi	a5,a5,255
    800013c4:	f9843683          	ld	a3,-104(s0)
    800013c8:	fe043703          	ld	a4,-32(s0)
    800013cc:	00e68733          	add	a4,a3,a4
    800013d0:	00f70023          	sb	a5,0(a4)
					}
					pos++;
    800013d4:	fe043783          	ld	a5,-32(s0)
    800013d8:	00178793          	addi	a5,a5,1
    800013dc:	fef43023          	sd	a5,-32(s0)
				for(int i = hexdigits; i >= 0; i--) {
    800013e0:	fdc42783          	lw	a5,-36(s0)
    800013e4:	fff7879b          	addiw	a5,a5,-1
    800013e8:	fcf42e23          	sw	a5,-36(s0)
    800013ec:	f65ff06f          	j	80001350 <_vsnprintf+0x160>
				}
				longarg = 0;
    800013f0:	fe042423          	sw	zero,-24(s0)
				format = 0;
    800013f4:	fe042623          	sw	zero,-20(s0)
				break;
    800013f8:	28c0006f          	j	80001684 <_vsnprintf+0x494>
			}
			case 'd': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
    800013fc:	fe842783          	lw	a5,-24(s0)
    80001400:	0007879b          	sext.w	a5,a5
    80001404:	00078c63          	beqz	a5,8000141c <_vsnprintf+0x22c>
    80001408:	f8043783          	ld	a5,-128(s0)
    8000140c:	00878713          	addi	a4,a5,8
    80001410:	f8e43023          	sd	a4,-128(s0)
    80001414:	0007b783          	ld	a5,0(a5)
    80001418:	0140006f          	j	8000142c <_vsnprintf+0x23c>
    8000141c:	f8043783          	ld	a5,-128(s0)
    80001420:	00878713          	addi	a4,a5,8
    80001424:	f8e43023          	sd	a4,-128(s0)
    80001428:	0007a783          	lw	a5,0(a5)
    8000142c:	fcf43823          	sd	a5,-48(s0)
				if (num < 0) {
    80001430:	fd043783          	ld	a5,-48(s0)
    80001434:	0407d263          	bgez	a5,80001478 <_vsnprintf+0x288>
					num = -num;
    80001438:	fd043783          	ld	a5,-48(s0)
    8000143c:	40f007b3          	neg	a5,a5
    80001440:	fcf43823          	sd	a5,-48(s0)
					if (out && pos < n) {
    80001444:	f9843783          	ld	a5,-104(s0)
    80001448:	02078263          	beqz	a5,8000146c <_vsnprintf+0x27c>
    8000144c:	fe043703          	ld	a4,-32(s0)
    80001450:	f9043783          	ld	a5,-112(s0)
    80001454:	00f77c63          	bgeu	a4,a5,8000146c <_vsnprintf+0x27c>
						out[pos] = '-';
    80001458:	f9843703          	ld	a4,-104(s0)
    8000145c:	fe043783          	ld	a5,-32(s0)
    80001460:	00f707b3          	add	a5,a4,a5
    80001464:	02d00713          	li	a4,45
    80001468:	00e78023          	sb	a4,0(a5)
					}
					pos++;
    8000146c:	fe043783          	ld	a5,-32(s0)
    80001470:	00178793          	addi	a5,a5,1
    80001474:	fef43023          	sd	a5,-32(s0)
				}
				long digits = 1;
    80001478:	00100793          	li	a5,1
    8000147c:	fcf43423          	sd	a5,-56(s0)
				for (long nn = num; nn /= 10; digits++);
    80001480:	fd043783          	ld	a5,-48(s0)
    80001484:	fcf43023          	sd	a5,-64(s0)
    80001488:	fc043703          	ld	a4,-64(s0)
    8000148c:	00a00793          	li	a5,10
    80001490:	02f747b3          	div	a5,a4,a5
    80001494:	fcf43023          	sd	a5,-64(s0)
    80001498:	fc043783          	ld	a5,-64(s0)
    8000149c:	00f037b3          	snez	a5,a5
    800014a0:	0ff7f793          	andi	a5,a5,255
    800014a4:	00078a63          	beqz	a5,800014b8 <_vsnprintf+0x2c8>
    800014a8:	fc843783          	ld	a5,-56(s0)
    800014ac:	00178793          	addi	a5,a5,1
    800014b0:	fcf43423          	sd	a5,-56(s0)
    800014b4:	fd5ff06f          	j	80001488 <_vsnprintf+0x298>
				for (int i = digits-1; i >= 0; i--) {
    800014b8:	fc843783          	ld	a5,-56(s0)
    800014bc:	0007879b          	sext.w	a5,a5
    800014c0:	fff7879b          	addiw	a5,a5,-1
    800014c4:	0007879b          	sext.w	a5,a5
    800014c8:	faf42e23          	sw	a5,-68(s0)
    800014cc:	fbc42783          	lw	a5,-68(s0)
    800014d0:	0007879b          	sext.w	a5,a5
    800014d4:	0607c863          	bltz	a5,80001544 <_vsnprintf+0x354>
					if (out && pos + i < n) {
    800014d8:	f9843783          	ld	a5,-104(s0)
    800014dc:	04078463          	beqz	a5,80001524 <_vsnprintf+0x334>
    800014e0:	fbc42703          	lw	a4,-68(s0)
    800014e4:	fe043783          	ld	a5,-32(s0)
    800014e8:	00f707b3          	add	a5,a4,a5
    800014ec:	f9043703          	ld	a4,-112(s0)
    800014f0:	02e7fa63          	bgeu	a5,a4,80001524 <_vsnprintf+0x334>
						out[pos + i] = '0' + (num % 10);
    800014f4:	fd043703          	ld	a4,-48(s0)
    800014f8:	00a00793          	li	a5,10
    800014fc:	02f767b3          	rem	a5,a4,a5
    80001500:	0ff7f713          	andi	a4,a5,255
    80001504:	fbc42683          	lw	a3,-68(s0)
    80001508:	fe043783          	ld	a5,-32(s0)
    8000150c:	00f687b3          	add	a5,a3,a5
    80001510:	f9843683          	ld	a3,-104(s0)
    80001514:	00f687b3          	add	a5,a3,a5
    80001518:	0307071b          	addiw	a4,a4,48
    8000151c:	0ff77713          	andi	a4,a4,255
    80001520:	00e78023          	sb	a4,0(a5)
					}
					num /= 10;
    80001524:	fd043703          	ld	a4,-48(s0)
    80001528:	00a00793          	li	a5,10
    8000152c:	02f747b3          	div	a5,a4,a5
    80001530:	fcf43823          	sd	a5,-48(s0)
				for (int i = digits-1; i >= 0; i--) {
    80001534:	fbc42783          	lw	a5,-68(s0)
    80001538:	fff7879b          	addiw	a5,a5,-1
    8000153c:	faf42e23          	sw	a5,-68(s0)
    80001540:	f8dff06f          	j	800014cc <_vsnprintf+0x2dc>
				}
				pos += digits;
    80001544:	fc843783          	ld	a5,-56(s0)
    80001548:	fe043703          	ld	a4,-32(s0)
    8000154c:	00f707b3          	add	a5,a4,a5
    80001550:	fef43023          	sd	a5,-32(s0)
				longarg = 0;
    80001554:	fe042423          	sw	zero,-24(s0)
				format = 0;
    80001558:	fe042623          	sw	zero,-20(s0)
				break;
    8000155c:	1280006f          	j	80001684 <_vsnprintf+0x494>
			}
			case 's': {
				const char* s2 = va_arg(vl, const char*);
    80001560:	f8043783          	ld	a5,-128(s0)
    80001564:	00878713          	addi	a4,a5,8
    80001568:	f8e43023          	sd	a4,-128(s0)
    8000156c:	0007b783          	ld	a5,0(a5)
    80001570:	faf43823          	sd	a5,-80(s0)
				while (*s2) {
    80001574:	fb043783          	ld	a5,-80(s0)
    80001578:	0007c783          	lbu	a5,0(a5)
    8000157c:	04078663          	beqz	a5,800015c8 <_vsnprintf+0x3d8>
					if (out && pos < n) {
    80001580:	f9843783          	ld	a5,-104(s0)
    80001584:	02078463          	beqz	a5,800015ac <_vsnprintf+0x3bc>
    80001588:	fe043703          	ld	a4,-32(s0)
    8000158c:	f9043783          	ld	a5,-112(s0)
    80001590:	00f77e63          	bgeu	a4,a5,800015ac <_vsnprintf+0x3bc>
						out[pos] = *s2;
    80001594:	f9843703          	ld	a4,-104(s0)
    80001598:	fe043783          	ld	a5,-32(s0)
    8000159c:	00f707b3          	add	a5,a4,a5
    800015a0:	fb043703          	ld	a4,-80(s0)
    800015a4:	00074703          	lbu	a4,0(a4)
    800015a8:	00e78023          	sb	a4,0(a5)
					}
					pos++;
    800015ac:	fe043783          	ld	a5,-32(s0)
    800015b0:	00178793          	addi	a5,a5,1
    800015b4:	fef43023          	sd	a5,-32(s0)
					s2++;
    800015b8:	fb043783          	ld	a5,-80(s0)
    800015bc:	00178793          	addi	a5,a5,1
    800015c0:	faf43823          	sd	a5,-80(s0)
				while (*s2) {
    800015c4:	fb1ff06f          	j	80001574 <_vsnprintf+0x384>
				}
				longarg = 0;
    800015c8:	fe042423          	sw	zero,-24(s0)
				format = 0;
    800015cc:	fe042623          	sw	zero,-20(s0)
				break;
    800015d0:	0b40006f          	j	80001684 <_vsnprintf+0x494>
			}
			case 'c': {
				if (out && pos < n) {
    800015d4:	f9843783          	ld	a5,-104(s0)
    800015d8:	02078a63          	beqz	a5,8000160c <_vsnprintf+0x41c>
    800015dc:	fe043703          	ld	a4,-32(s0)
    800015e0:	f9043783          	ld	a5,-112(s0)
    800015e4:	02f77463          	bgeu	a4,a5,8000160c <_vsnprintf+0x41c>
					out[pos] = (char)va_arg(vl,int);
    800015e8:	f8043783          	ld	a5,-128(s0)
    800015ec:	00878713          	addi	a4,a5,8
    800015f0:	f8e43023          	sd	a4,-128(s0)
    800015f4:	0007a683          	lw	a3,0(a5)
    800015f8:	f9843703          	ld	a4,-104(s0)
    800015fc:	fe043783          	ld	a5,-32(s0)
    80001600:	00f707b3          	add	a5,a4,a5
    80001604:	0ff6f713          	andi	a4,a3,255
    80001608:	00e78023          	sb	a4,0(a5)
				}
				pos++;
    8000160c:	fe043783          	ld	a5,-32(s0)
    80001610:	00178793          	addi	a5,a5,1
    80001614:	fef43023          	sd	a5,-32(s0)
				longarg = 0;
    80001618:	fe042423          	sw	zero,-24(s0)
				format = 0;
    8000161c:	fe042623          	sw	zero,-20(s0)
				break;
    80001620:	0640006f          	j	80001684 <_vsnprintf+0x494>
			}
			default:
				break;
			}
		} else if (*s == '%') {
    80001624:	f8843783          	ld	a5,-120(s0)
    80001628:	0007c783          	lbu	a5,0(a5)
    8000162c:	00078713          	mv	a4,a5
    80001630:	02500793          	li	a5,37
    80001634:	00f71863          	bne	a4,a5,80001644 <_vsnprintf+0x454>
			format = 1;
    80001638:	00100793          	li	a5,1
    8000163c:	fef42623          	sw	a5,-20(s0)
    80001640:	0440006f          	j	80001684 <_vsnprintf+0x494>
		} else {
			if (out && pos < n) {
    80001644:	f9843783          	ld	a5,-104(s0)
    80001648:	02078463          	beqz	a5,80001670 <_vsnprintf+0x480>
    8000164c:	fe043703          	ld	a4,-32(s0)
    80001650:	f9043783          	ld	a5,-112(s0)
    80001654:	00f77e63          	bgeu	a4,a5,80001670 <_vsnprintf+0x480>
				out[pos] = *s;
    80001658:	f9843703          	ld	a4,-104(s0)
    8000165c:	fe043783          	ld	a5,-32(s0)
    80001660:	00f707b3          	add	a5,a4,a5
    80001664:	f8843703          	ld	a4,-120(s0)
    80001668:	00074703          	lbu	a4,0(a4)
    8000166c:	00e78023          	sb	a4,0(a5)
			}
			pos++;
    80001670:	fe043783          	ld	a5,-32(s0)
    80001674:	00178793          	addi	a5,a5,1
    80001678:	fef43023          	sd	a5,-32(s0)
    8000167c:	0080006f          	j	80001684 <_vsnprintf+0x494>
				break;
    80001680:	00000013          	nop
	for (; *s; s++) {
    80001684:	f8843783          	ld	a5,-120(s0)
    80001688:	00178793          	addi	a5,a5,1
    8000168c:	f8f43423          	sd	a5,-120(s0)
    80001690:	b89ff06f          	j	80001218 <_vsnprintf+0x28>
		}
    	}
	if (out && pos < n) {
    80001694:	f9843783          	ld	a5,-104(s0)
    80001698:	02078263          	beqz	a5,800016bc <_vsnprintf+0x4cc>
    8000169c:	fe043703          	ld	a4,-32(s0)
    800016a0:	f9043783          	ld	a5,-112(s0)
    800016a4:	00f77c63          	bgeu	a4,a5,800016bc <_vsnprintf+0x4cc>
		out[pos] = 0;
    800016a8:	f9843703          	ld	a4,-104(s0)
    800016ac:	fe043783          	ld	a5,-32(s0)
    800016b0:	00f707b3          	add	a5,a4,a5
    800016b4:	00078023          	sb	zero,0(a5)
    800016b8:	0280006f          	j	800016e0 <_vsnprintf+0x4f0>
	} else if (out && n) {
    800016bc:	f9843783          	ld	a5,-104(s0)
    800016c0:	02078063          	beqz	a5,800016e0 <_vsnprintf+0x4f0>
    800016c4:	f9043783          	ld	a5,-112(s0)
    800016c8:	00078c63          	beqz	a5,800016e0 <_vsnprintf+0x4f0>
		out[n-1] = 0;
    800016cc:	f9043783          	ld	a5,-112(s0)
    800016d0:	fff78793          	addi	a5,a5,-1
    800016d4:	f9843703          	ld	a4,-104(s0)
    800016d8:	00f707b3          	add	a5,a4,a5
    800016dc:	00078023          	sb	zero,0(a5)
	}
	return pos;
    800016e0:	fe043783          	ld	a5,-32(s0)
    800016e4:	0007879b          	sext.w	a5,a5
}
    800016e8:	00078513          	mv	a0,a5
    800016ec:	07813403          	ld	s0,120(sp)
    800016f0:	08010113          	addi	sp,sp,128
    800016f4:	00008067          	ret

00000000800016f8 <_vprintf>:

static char out_buf[1000]; // buffer for _vprintf()

static int _vprintf(const char* s, va_list vl)
{
    800016f8:	fd010113          	addi	sp,sp,-48
    800016fc:	02113423          	sd	ra,40(sp)
    80001700:	02813023          	sd	s0,32(sp)
    80001704:	03010413          	addi	s0,sp,48
    80001708:	fca43c23          	sd	a0,-40(s0)
    8000170c:	fcb43823          	sd	a1,-48(s0)
	int res = _vsnprintf(NULL, -1, s, vl);
    80001710:	fd043683          	ld	a3,-48(s0)
    80001714:	fd843603          	ld	a2,-40(s0)
    80001718:	fff00593          	li	a1,-1
    8000171c:	00000513          	li	a0,0
    80001720:	ad1ff0ef          	jal	ra,800011f0 <_vsnprintf>
    80001724:	00050793          	mv	a5,a0
    80001728:	fef42623          	sw	a5,-20(s0)
	if (res+1 >= sizeof(out_buf)) {
    8000172c:	fec42783          	lw	a5,-20(s0)
    80001730:	0017879b          	addiw	a5,a5,1
    80001734:	0007879b          	sext.w	a5,a5
    80001738:	00078713          	mv	a4,a5
    8000173c:	3e700793          	li	a5,999
    80001740:	02e7f063          	bgeu	a5,a4,80001760 <_vprintf+0x68>
		puts("error: output string size overflow\n");
    80001744:	00004797          	auipc	a5,0x4
    80001748:	8bc78793          	addi	a5,a5,-1860 # 80005000 <puts>
    8000174c:	0007b783          	ld	a5,0(a5)
    80001750:	00000517          	auipc	a0,0x0
    80001754:	2e850513          	addi	a0,a0,744 # 80001a38 <_ZL11syscallPtrs+0x120>
    80001758:	000780e7          	jalr	a5
		while(1) {}
    8000175c:	0000006f          	j	8000175c <_vprintf+0x64>
	}
	_vsnprintf(out_buf, res + 1, s, vl);
    80001760:	fec42783          	lw	a5,-20(s0)
    80001764:	0017879b          	addiw	a5,a5,1
    80001768:	0007879b          	sext.w	a5,a5
    8000176c:	fd043683          	ld	a3,-48(s0)
    80001770:	fd843603          	ld	a2,-40(s0)
    80001774:	00078593          	mv	a1,a5
    80001778:	00004517          	auipc	a0,0x4
    8000177c:	c8050513          	addi	a0,a0,-896 # 800053f8 <_ZL7out_buf>
    80001780:	a71ff0ef          	jal	ra,800011f0 <_vsnprintf>
	puts(out_buf);
    80001784:	00004797          	auipc	a5,0x4
    80001788:	87c78793          	addi	a5,a5,-1924 # 80005000 <puts>
    8000178c:	0007b783          	ld	a5,0(a5)
    80001790:	00004517          	auipc	a0,0x4
    80001794:	c6850513          	addi	a0,a0,-920 # 800053f8 <_ZL7out_buf>
    80001798:	000780e7          	jalr	a5
	return res;
    8000179c:	fec42783          	lw	a5,-20(s0)
}
    800017a0:	00078513          	mv	a0,a5
    800017a4:	02813083          	ld	ra,40(sp)
    800017a8:	02013403          	ld	s0,32(sp)
    800017ac:	03010113          	addi	sp,sp,48
    800017b0:	00008067          	ret

00000000800017b4 <printf>:

int printf(const char* s, ...)
{
    800017b4:	f9010113          	addi	sp,sp,-112
    800017b8:	02113423          	sd	ra,40(sp)
    800017bc:	02813023          	sd	s0,32(sp)
    800017c0:	03010413          	addi	s0,sp,48
    800017c4:	fca43c23          	sd	a0,-40(s0)
    800017c8:	00b43423          	sd	a1,8(s0)
    800017cc:	00c43823          	sd	a2,16(s0)
    800017d0:	00d43c23          	sd	a3,24(s0)
    800017d4:	02e43023          	sd	a4,32(s0)
    800017d8:	02f43423          	sd	a5,40(s0)
    800017dc:	03043823          	sd	a6,48(s0)
    800017e0:	03143c23          	sd	a7,56(s0)
	int res = 0;
    800017e4:	fe042623          	sw	zero,-20(s0)
	va_list vl;
	va_start(vl, s);
    800017e8:	04040793          	addi	a5,s0,64
    800017ec:	fcf43823          	sd	a5,-48(s0)
    800017f0:	fd043783          	ld	a5,-48(s0)
    800017f4:	fc878793          	addi	a5,a5,-56
    800017f8:	fef43023          	sd	a5,-32(s0)
	res = _vprintf(s, vl);
    800017fc:	fe043783          	ld	a5,-32(s0)
    80001800:	00078593          	mv	a1,a5
    80001804:	fd843503          	ld	a0,-40(s0)
    80001808:	ef1ff0ef          	jal	ra,800016f8 <_vprintf>
    8000180c:	00050793          	mv	a5,a0
    80001810:	fef42623          	sw	a5,-20(s0)
	va_end(vl);
	return res;
    80001814:	fec42783          	lw	a5,-20(s0)
}
    80001818:	00078513          	mv	a0,a5
    8000181c:	02813083          	ld	ra,40(sp)
    80001820:	02013403          	ld	s0,32(sp)
    80001824:	07010113          	addi	sp,sp,112
    80001828:	00008067          	ret

000000008000182c <panic>:

void panic(char *s)
{
    8000182c:	fe010113          	addi	sp,sp,-32
    80001830:	00113c23          	sd	ra,24(sp)
    80001834:	00813823          	sd	s0,16(sp)
    80001838:	02010413          	addi	s0,sp,32
    8000183c:	fea43423          	sd	a0,-24(s0)
	printf("panic: ");
    80001840:	00000517          	auipc	a0,0x0
    80001844:	22050513          	addi	a0,a0,544 # 80001a60 <_ZL11syscallPtrs+0x148>
    80001848:	f6dff0ef          	jal	ra,800017b4 <printf>
	printf(s);
    8000184c:	fe843503          	ld	a0,-24(s0)
    80001850:	f65ff0ef          	jal	ra,800017b4 <printf>
	printf("\n");
    80001854:	00000517          	auipc	a0,0x0
    80001858:	21450513          	addi	a0,a0,532 # 80001a68 <_ZL11syscallPtrs+0x150>
    8000185c:	f59ff0ef          	jal	ra,800017b4 <printf>
	while(1){};
    80001860:	0000006f          	j	80001860 <panic+0x34>

0000000080001864 <halt>:
}
void halt(){
    80001864:	ff010113          	addi	sp,sp,-16
    80001868:	00813423          	sd	s0,8(sp)
    8000186c:	01010413          	addi	s0,sp,16
	while(1)asm("wfi");
    80001870:	10500073          	wfi
    80001874:	ffdff06f          	j	80001870 <halt+0xc>

0000000080001878 <_Z8program0v>:
#include "kernel.hh"

void program0(){
    80001878:	ff010113          	addi	sp,sp,-16
    8000187c:	00113423          	sd	ra,8(sp)
    80001880:	00813023          	sd	s0,0(sp)
    80001884:	01010413          	addi	s0,sp,16
    while(true){
        sys::syscall(0);
    80001888:	00000513          	li	a0,0
    8000188c:	02c000ef          	jal	ra,800018b8 <_ZN3sys7syscallEi>
        ExecInst(wfi);
    80001890:	10500073          	wfi
        sys::syscall(0);
    80001894:	ff5ff06f          	j	80001888 <_Z8program0v+0x10>

0000000080001898 <_Z8program1v>:
    }
}
void program1(){
    80001898:	ff010113          	addi	sp,sp,-16
    8000189c:	00113423          	sd	ra,8(sp)
    800018a0:	00813023          	sd	s0,0(sp)
    800018a4:	01010413          	addi	s0,sp,16
    while(true){
        sys::syscall(1);
    800018a8:	00100513          	li	a0,1
    800018ac:	00c000ef          	jal	ra,800018b8 <_ZN3sys7syscallEi>
        ExecInst(wfi);
    800018b0:	10500073          	wfi
        sys::syscall(1);
    800018b4:	ff5ff06f          	j	800018a8 <_Z8program1v+0x10>

00000000800018b8 <_ZN3sys7syscallEi>:
        none,
        one,
        nSyscalls,
    };
    constexpr syscall_t getSyscall(int id);
    inline int syscall(int id){
    800018b8:	fe010113          	addi	sp,sp,-32
    800018bc:	00813c23          	sd	s0,24(sp)
    800018c0:	02010413          	addi	s0,sp,32
    800018c4:	00050793          	mv	a5,a0
    800018c8:	fef42623          	sw	a5,-20(s0)
        register int a7 asm("a7")=id;
    800018cc:	fec42883          	lw	a7,-20(s0)
        ExecInst(ecall);
    800018d0:	00000073          	ecall
        register int a0 asm("a0");
        return a0;
    800018d4:	0005079b          	sext.w	a5,a0
    }
    800018d8:	00078513          	mv	a0,a5
    800018dc:	01813403          	ld	s0,24(sp)
    800018e0:	02010113          	addi	sp,sp,32
    800018e4:	00008067          	ret
