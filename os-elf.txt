
os.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_start>:
	.global	_start

	.text
_start:
	# park harts with id != 0
	csrr	t0, mhartid		# read current hart id
    80000000:	f14022f3          	csrr	t0,mhartid
	mv	tp, t0			# keep CPU's hartid in its tp for later usage.
    80000004:	00028213          	mv	tp,t0
	bnez	t0, park		# if we're not on the hart 0
    80000008:	00029e63          	bnez	t0,80000024 <park>
					# we park the hart
	# Setup stacks, the stack grows from bottom to top, so we put the
	# stack pointer to the very end of the stack range.
	slli	t0, t0, 10		# shift left the hart id by 1024
    8000000c:	00a29293          	slli	t0,t0,0xa
	la	sp, stacks + STACK_SIZE	# set the initial stack pointer
    80000010:	00000117          	auipc	sp,0x0
    80000014:	41c10113          	addi	sp,sp,1052 # 8000042c <stacks+0x400>
					# to the end of the first stack space
	add	sp, sp, t0		# move the current hart stack pointer
    80000018:	00510133          	add	sp,sp,t0
					# to its place in the stack space

    j   sbi_init            # hart 0 jump to sbi
    8000001c:	4b80206f          	j	800024d4 <sbi_init>

	j	start_kernel		# hart 0 jump to c
    80000020:	00c0206f          	j	8000202c <start_kernel>

0000000080000024 <park>:

park:
	wfi
    80000024:	10500073          	wfi
	j	park
    80000028:	ffdff06f          	j	80000024 <park>

000000008000002c <stacks>:
	...

000000008000202c <start_kernel>:
extern "C" void start_kernel(){
    8000202c:	ff010113          	addi	sp,sp,-16
    80002030:	00813423          	sd	s0,8(sp)
    80002034:	01010413          	addi	s0,sp,16
    
    80002038:	00000013          	nop
    8000203c:	00813403          	ld	s0,8(sp)
    80002040:	01010113          	addi	sp,sp,16
    80002044:	00008067          	ret

0000000080002048 <_Z8MIEnablev>:
    enum fields{
        UIE,
        MIE,
    };
}
FORCEDINLINE void MIEnable(){
    80002048:	ff010113          	addi	sp,sp,-16
    8000204c:	00813423          	sd	s0,8(sp)
    80002050:	01010413          	addi	s0,sp,16
    csrSeti(mstatus,BIT(mstatus::fields::MIE));
    80002054:	30016073          	csrsi	mstatus,2
}
    80002058:	00000013          	nop
    8000205c:	00813403          	ld	s0,8(sp)
    80002060:	01010113          	addi	sp,sp,16
    80002064:	00008067          	ret

0000000080002068 <_Z11isInterruptm>:
FORCEDINLINE bool isInterrupt(xlen_t mcause){
    80002068:	fe010113          	addi	sp,sp,-32
    8000206c:	00813c23          	sd	s0,24(sp)
    80002070:	02010413          	addi	s0,sp,32
    80002074:	fea43423          	sd	a0,-24(s0)
    return (mcause>>63)&1;
    80002078:	fe843783          	ld	a5,-24(s0)
    8000207c:	03f7d793          	srli	a5,a5,0x3f
    80002080:	0ff7f793          	andi	a5,a5,255
}
    80002084:	00078513          	mv	a0,a5
    80002088:	01813403          	ld	s0,24(sp)
    8000208c:	02010113          	addi	sp,sp,32
    80002090:	00008067          	ret

0000000080002094 <_Z9plicClaimv>:
}*/
inline int Hart(){
    int rt; csrRead(mhartid,rt);
    return rt;
}
int plicClaim(){
    80002094:	fe010113          	addi	sp,sp,-32
    80002098:	00113c23          	sd	ra,24(sp)
    8000209c:	00813823          	sd	s0,16(sp)
    800020a0:	02010413          	addi	s0,sp,32
    int hart=Hart();
    800020a4:	5e4000ef          	jal	ra,80002688 <_Z4Hartv>
    800020a8:	00050793          	mv	a5,a0
    800020ac:	fef42623          	sw	a5,-20(s0)
    int irq=mmio<int>(platform::plic::claimOf(hart));
    800020b0:	fec42783          	lw	a5,-20(s0)
    800020b4:	00078513          	mv	a0,a5
    800020b8:	590000ef          	jal	ra,80002648 <_ZN8platform4plic7claimOfEi>
    800020bc:	00050793          	mv	a5,a0
    800020c0:	fef43023          	sd	a5,-32(s0)
 */
#define MAXNUM_CPU 8

template<typename T>
FORCEDINLINE T& mmio(xlen_t addr){
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    800020c4:	fe043783          	ld	a5,-32(s0)
    800020c8:	0007a783          	lw	a5,0(a5)
    800020cc:	fef42423          	sw	a5,-24(s0)
}
    800020d0:	00000013          	nop
    800020d4:	00078513          	mv	a0,a5
    800020d8:	01813083          	ld	ra,24(sp)
    800020dc:	01013403          	ld	s0,16(sp)
    800020e0:	02010113          	addi	sp,sp,32
    800020e4:	00008067          	ret

00000000800020e8 <_Z12plicCompletei>:
void plicComplete(int irq){
    800020e8:	fd010113          	addi	sp,sp,-48
    800020ec:	02113423          	sd	ra,40(sp)
    800020f0:	02813023          	sd	s0,32(sp)
    800020f4:	03010413          	addi	s0,sp,48
    800020f8:	00050793          	mv	a5,a0
    800020fc:	fcf42e23          	sw	a5,-36(s0)
    int hart=Hart();
    80002100:	588000ef          	jal	ra,80002688 <_Z4Hartv>
    80002104:	00050793          	mv	a5,a0
    80002108:	fef42623          	sw	a5,-20(s0)
    mmio<int>(platform::plic::claimOf(hart))=irq;
    8000210c:	fec42783          	lw	a5,-20(s0)
    80002110:	00078513          	mv	a0,a5
    80002114:	534000ef          	jal	ra,80002648 <_ZN8platform4plic7claimOfEi>
    80002118:	00050793          	mv	a5,a0
    8000211c:	fef43023          	sd	a5,-32(s0)
    80002120:	fe043783          	ld	a5,-32(s0)
    80002124:	fdc42703          	lw	a4,-36(s0)
    80002128:	00e7a023          	sw	a4,0(a5)
}
    8000212c:	00000013          	nop
    80002130:	02813083          	ld	ra,40(sp)
    80002134:	02013403          	ld	s0,32(sp)
    80002138:	03010113          	addi	sp,sp,48
    8000213c:	00008067          	ret

0000000080002140 <_Z24externalInterruptHandlerv>:

void externalInterruptHandler(){
    80002140:	fc010113          	addi	sp,sp,-64
    80002144:	02113c23          	sd	ra,56(sp)
    80002148:	02813823          	sd	s0,48(sp)
    8000214c:	02913423          	sd	s1,40(sp)
    80002150:	04010413          	addi	s0,sp,64
    int irq=plicClaim();
    80002154:	f41ff0ef          	jal	ra,80002094 <_Z9plicClaimv>
    80002158:	00050793          	mv	a5,a0
    8000215c:	fcf42e23          	sw	a5,-36(s0)
    if(irq==platform::uart0::irq){
    80002160:	fdc42783          	lw	a5,-36(s0)
    80002164:	0007871b          	sext.w	a4,a5
    80002168:	00a00793          	li	a5,10
    8000216c:	06f71063          	bne	a4,a5,800021cc <_Z24externalInterruptHandlerv+0x8c>
        using namespace platform::uart0;
        while(mmio<volatile lsr>(reg(LSR)).rxnemp){
    80002170:	00500513          	li	a0,5
    80002174:	398000ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    80002178:	00050793          	mv	a5,a0
    8000217c:	fcf43823          	sd	a5,-48(s0)
    80002180:	fd043783          	ld	a5,-48(s0)
    80002184:	0007c783          	lbu	a5,0(a5)
    80002188:	0017f793          	andi	a5,a5,1
    8000218c:	0ff7f793          	andi	a5,a5,255
    80002190:	02078e63          	beqz	a5,800021cc <_Z24externalInterruptHandlerv+0x8c>
            mmio<volatile uint8_t>(reg(THR))=mmio<volatile uint8_t>(reg(RHR));
    80002194:	00000513          	li	a0,0
    80002198:	374000ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    8000219c:	00050793          	mv	a5,a0
    800021a0:	fcf43023          	sd	a5,-64(s0)
    800021a4:	fc043483          	ld	s1,-64(s0)
    800021a8:	00000513          	li	a0,0
    800021ac:	360000ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    800021b0:	00050793          	mv	a5,a0
    800021b4:	fcf43423          	sd	a5,-56(s0)
    800021b8:	fc843783          	ld	a5,-56(s0)
    800021bc:	0004c703          	lbu	a4,0(s1)
    800021c0:	0ff77713          	andi	a4,a4,255
    800021c4:	00e78023          	sb	a4,0(a5)
        while(mmio<volatile lsr>(reg(LSR)).rxnemp){
    800021c8:	fa9ff06f          	j	80002170 <_Z24externalInterruptHandlerv+0x30>
        }
    }
    plicComplete(irq);
    800021cc:	fdc42783          	lw	a5,-36(s0)
    800021d0:	00078513          	mv	a0,a5
    800021d4:	f15ff0ef          	jal	ra,800020e8 <_Z12plicCompletei>
}
    800021d8:	00000013          	nop
    800021dc:	03813083          	ld	ra,56(sp)
    800021e0:	03013403          	ld	s0,48(sp)
    800021e4:	02813483          	ld	s1,40(sp)
    800021e8:	04010113          	addi	sp,sp,64
    800021ec:	00008067          	ret

00000000800021f0 <_Z12mtraphandlerv>:

__attribute__ ((interrupt ("machine")))void mtraphandler(){
    800021f0:	e5010113          	addi	sp,sp,-432
    800021f4:	1a113423          	sd	ra,424(sp)
    800021f8:	1a513023          	sd	t0,416(sp)
    800021fc:	18613c23          	sd	t1,408(sp)
    80002200:	18713823          	sd	t2,400(sp)
    80002204:	18813423          	sd	s0,392(sp)
    80002208:	18a13023          	sd	a0,384(sp)
    8000220c:	16b13c23          	sd	a1,376(sp)
    80002210:	16c13823          	sd	a2,368(sp)
    80002214:	16d13423          	sd	a3,360(sp)
    80002218:	16e13023          	sd	a4,352(sp)
    8000221c:	14f13c23          	sd	a5,344(sp)
    80002220:	15013823          	sd	a6,336(sp)
    80002224:	15113423          	sd	a7,328(sp)
    80002228:	15c13023          	sd	t3,320(sp)
    8000222c:	13d13c23          	sd	t4,312(sp)
    80002230:	13e13823          	sd	t5,304(sp)
    80002234:	13f13423          	sd	t6,296(sp)
    80002238:	10013c27          	fsd	ft0,280(sp)
    8000223c:	10113827          	fsd	ft1,272(sp)
    80002240:	10213427          	fsd	ft2,264(sp)
    80002244:	10313027          	fsd	ft3,256(sp)
    80002248:	0e413c27          	fsd	ft4,248(sp)
    8000224c:	0e513827          	fsd	ft5,240(sp)
    80002250:	0e613427          	fsd	ft6,232(sp)
    80002254:	0e713027          	fsd	ft7,224(sp)
    80002258:	0c813c27          	fsd	fs0,216(sp)
    8000225c:	0c913827          	fsd	fs1,208(sp)
    80002260:	0ca13427          	fsd	fa0,200(sp)
    80002264:	0cb13027          	fsd	fa1,192(sp)
    80002268:	0ac13c27          	fsd	fa2,184(sp)
    8000226c:	0ad13827          	fsd	fa3,176(sp)
    80002270:	0ae13427          	fsd	fa4,168(sp)
    80002274:	0af13027          	fsd	fa5,160(sp)
    80002278:	09013c27          	fsd	fa6,152(sp)
    8000227c:	09113827          	fsd	fa7,144(sp)
    80002280:	09213427          	fsd	fs2,136(sp)
    80002284:	09313027          	fsd	fs3,128(sp)
    80002288:	07413c27          	fsd	fs4,120(sp)
    8000228c:	07513827          	fsd	fs5,112(sp)
    80002290:	07613427          	fsd	fs6,104(sp)
    80002294:	07713027          	fsd	fs7,96(sp)
    80002298:	05813c27          	fsd	fs8,88(sp)
    8000229c:	05913827          	fsd	fs9,80(sp)
    800022a0:	05a13427          	fsd	fs10,72(sp)
    800022a4:	05b13027          	fsd	fs11,64(sp)
    800022a8:	03c13c27          	fsd	ft8,56(sp)
    800022ac:	03d13827          	fsd	ft9,48(sp)
    800022b0:	03e13427          	fsd	ft10,40(sp)
    800022b4:	03f13027          	fsd	ft11,32(sp)
    800022b8:	1b010413          	addi	s0,sp,432
    // saveContext();
    ptr_t mepc; csrRead(mepc,mepc);
    800022bc:	341027f3          	csrr	a5,mepc
    800022c0:	e6f43423          	sd	a5,-408(s0)
    xlen_t mcause; csrRead(mcause,mcause);
    800022c4:	342027f3          	csrr	a5,mcause
    800022c8:	e6f43023          	sd	a5,-416(s0)
    800022cc:	e6043783          	ld	a5,-416(s0)
    800022d0:	e4f43c23          	sd	a5,-424(s0)
    return (mcause>>63)&1;
    800022d4:	e5843783          	ld	a5,-424(s0)
    800022d8:	03f7d793          	srli	a5,a5,0x3f
    800022dc:	0ff7f793          	andi	a5,a5,255

    if(isInterrupt(mcause)){
    800022e0:	04078263          	beqz	a5,80002324 <_Z12mtraphandlerv+0x134>
    800022e4:	e6043703          	ld	a4,-416(s0)
    800022e8:	00b00793          	li	a5,11
    800022ec:	06e7e463          	bltu	a5,a4,80002354 <_Z12mtraphandlerv+0x164>
    800022f0:	e6043783          	ld	a5,-416(s0)
    800022f4:	00279713          	slli	a4,a5,0x2
    800022f8:	00000797          	auipc	a5,0x0
    800022fc:	56078793          	addi	a5,a5,1376 # 80002858 <_Z9plic_initv+0x74>
    80002300:	00f707b3          	add	a5,a4,a5
    80002304:	0007a783          	lw	a5,0(a5)
    80002308:	0007871b          	sext.w	a4,a5
    8000230c:	00000797          	auipc	a5,0x0
    80002310:	54c78793          	addi	a5,a5,1356 # 80002858 <_Z9plic_initv+0x74>
    80002314:	00f707b3          	add	a5,a4,a5
    80002318:	00078067          	jr	a5
            case mti: break;

            case uei: break;
            case sei: break;
            case hei: break;
            case mei: externalInterruptHandler();
    8000231c:	e25ff0ef          	jal	ra,80002140 <_Z24externalInterruptHandlerv>
                break;
        }
    }
    // restoreContext();
    // ExecInst(mret);
}
    80002320:	0340006f          	j	80002354 <_Z12mtraphandlerv+0x164>
        switch(mcause){
    80002324:	e6043703          	ld	a4,-416(s0)
    80002328:	00800793          	li	a5,8
    8000232c:	00f70e63          	beq	a4,a5,80002348 <_Z12mtraphandlerv+0x158>
    80002330:	e6043703          	ld	a4,-416(s0)
    80002334:	00900793          	li	a5,9
    80002338:	00f70c63          	beq	a4,a5,80002350 <_Z12mtraphandlerv+0x160>
                break;
    8000233c:	0180006f          	j	80002354 <_Z12mtraphandlerv+0x164>
            case usi: break;
    80002340:	00000013          	nop
    80002344:	0100006f          	j	80002354 <_Z12mtraphandlerv+0x164>
            case uecall:break;
    80002348:	00000013          	nop
    8000234c:	0080006f          	j	80002354 <_Z12mtraphandlerv+0x164>
            case secall:break;
    80002350:	00000013          	nop
}
    80002354:	00000013          	nop
    80002358:	1a813083          	ld	ra,424(sp)
    8000235c:	1a013283          	ld	t0,416(sp)
    80002360:	19813303          	ld	t1,408(sp)
    80002364:	19013383          	ld	t2,400(sp)
    80002368:	18813403          	ld	s0,392(sp)
    8000236c:	18013503          	ld	a0,384(sp)
    80002370:	17813583          	ld	a1,376(sp)
    80002374:	17013603          	ld	a2,368(sp)
    80002378:	16813683          	ld	a3,360(sp)
    8000237c:	16013703          	ld	a4,352(sp)
    80002380:	15813783          	ld	a5,344(sp)
    80002384:	15013803          	ld	a6,336(sp)
    80002388:	14813883          	ld	a7,328(sp)
    8000238c:	14013e03          	ld	t3,320(sp)
    80002390:	13813e83          	ld	t4,312(sp)
    80002394:	13013f03          	ld	t5,304(sp)
    80002398:	12813f83          	ld	t6,296(sp)
    8000239c:	11813007          	fld	ft0,280(sp)
    800023a0:	11013087          	fld	ft1,272(sp)
    800023a4:	10813107          	fld	ft2,264(sp)
    800023a8:	10013187          	fld	ft3,256(sp)
    800023ac:	0f813207          	fld	ft4,248(sp)
    800023b0:	0f013287          	fld	ft5,240(sp)
    800023b4:	0e813307          	fld	ft6,232(sp)
    800023b8:	0e013387          	fld	ft7,224(sp)
    800023bc:	0d813407          	fld	fs0,216(sp)
    800023c0:	0d013487          	fld	fs1,208(sp)
    800023c4:	0c813507          	fld	fa0,200(sp)
    800023c8:	0c013587          	fld	fa1,192(sp)
    800023cc:	0b813607          	fld	fa2,184(sp)
    800023d0:	0b013687          	fld	fa3,176(sp)
    800023d4:	0a813707          	fld	fa4,168(sp)
    800023d8:	0a013787          	fld	fa5,160(sp)
    800023dc:	09813807          	fld	fa6,152(sp)
    800023e0:	09013887          	fld	fa7,144(sp)
    800023e4:	08813907          	fld	fs2,136(sp)
    800023e8:	08013987          	fld	fs3,128(sp)
    800023ec:	07813a07          	fld	fs4,120(sp)
    800023f0:	07013a87          	fld	fs5,112(sp)
    800023f4:	06813b07          	fld	fs6,104(sp)
    800023f8:	06013b87          	fld	fs7,96(sp)
    800023fc:	05813c07          	fld	fs8,88(sp)
    80002400:	05013c87          	fld	fs9,80(sp)
    80002404:	04813d07          	fld	fs10,72(sp)
    80002408:	04013d87          	fld	fs11,64(sp)
    8000240c:	03813e07          	fld	ft8,56(sp)
    80002410:	03013e87          	fld	ft9,48(sp)
    80002414:	02813f07          	fld	ft10,40(sp)
    80002418:	02013f87          	fld	ft11,32(sp)
    8000241c:	1b010113          	addi	sp,sp,432
    80002420:	30200073          	mret

0000000080002424 <_Z8uartInitv>:
void uartInit(){
    80002424:	fe010113          	addi	sp,sp,-32
    80002428:	00113c23          	sd	ra,24(sp)
    8000242c:	00813823          	sd	s0,16(sp)
    80002430:	02010413          	addi	s0,sp,32
    using namespace platform::uart0;
    mmio<uint8_t>(reg(IER))=0x00;
    80002434:	00100513          	li	a0,1
    80002438:	0d4000ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    8000243c:	00050793          	mv	a5,a0
    80002440:	fef43423          	sd	a5,-24(s0)
    80002444:	fe843783          	ld	a5,-24(s0)
    80002448:	00078023          	sb	zero,0(a5)
    // while(true){
        puts("Hello Uart\n");
    8000244c:	00000517          	auipc	a0,0x0
    80002450:	43c50513          	addi	a0,a0,1084 # 80002888 <_Z9plic_initv+0xa4>
    80002454:	168000ef          	jal	ra,800025bc <_ZN8platform5uart04putsEPKc>
    // }
}
    80002458:	00000013          	nop
    8000245c:	01813083          	ld	ra,24(sp)
    80002460:	01013403          	ld	s0,16(sp)
    80002464:	02010113          	addi	sp,sp,32
    80002468:	00008067          	ret

000000008000246c <_Z8plicInitv>:
void plicInit(){
    8000246c:	fd010113          	addi	sp,sp,-48
    80002470:	02113423          	sd	ra,40(sp)
    80002474:	02813023          	sd	s0,32(sp)
    80002478:	03010413          	addi	s0,sp,48
    // int hart=Hart();
    int hart=0;
    8000247c:	fe042623          	sw	zero,-20(s0)
    xlen_t addr=platform::plic::priorityOf(platform::uart0::irq);
    80002480:	0c0007b7          	lui	a5,0xc000
    80002484:	02878793          	addi	a5,a5,40 # c000028 <STACK_SIZE+0xbfffc28>
    80002488:	fef43023          	sd	a5,-32(s0)
    8000248c:	fe043783          	ld	a5,-32(s0)
    80002490:	fcf43823          	sd	a5,-48(s0)
    80002494:	fd043783          	ld	a5,-48(s0)
    mmio<uint8_t>(addr)=1;
    80002498:	00100713          	li	a4,1
    8000249c:	00e78023          	sb	a4,0(a5)
    mmio<uint8_t>(platform::plic::enableOf(hart))=1<<platform::uart0::irq;
    800024a0:	fec42783          	lw	a5,-20(s0)
    800024a4:	00078513          	mv	a0,a5
    800024a8:	164000ef          	jal	ra,8000260c <_ZN8platform4plic8enableOfEi>
    800024ac:	00050793          	mv	a5,a0
    800024b0:	fcf43c23          	sd	a5,-40(s0)
    800024b4:	fd843783          	ld	a5,-40(s0)
    800024b8:	00078023          	sb	zero,0(a5)
    uartInit();
    800024bc:	f69ff0ef          	jal	ra,80002424 <_Z8uartInitv>
}
    800024c0:	00000013          	nop
    800024c4:	02813083          	ld	ra,40(sp)
    800024c8:	02013403          	ld	s0,32(sp)
    800024cc:	03010113          	addi	sp,sp,48
    800024d0:	00008067          	ret

00000000800024d4 <sbi_init>:
extern void plic_init();
extern "C" void sbi_init(){
    800024d4:	ff010113          	addi	sp,sp,-16
    800024d8:	00113423          	sd	ra,8(sp)
    800024dc:	00813023          	sd	s0,0(sp)
    800024e0:	01010413          	addi	s0,sp,16
    // csrWritei(mtvec,mtraphandler);
    // {asm volatile ("csrw ""mtvec"", %0" :: "r"(mtraphandler));}
    uartInit();
    800024e4:	f41ff0ef          	jal	ra,80002424 <_Z8uartInitv>
    // plicInit();
    plic_init();
    800024e8:	2fc000ef          	jal	ra,800027e4 <_Z9plic_initv>
    platform::uart0::puts("here");
    800024ec:	00000517          	auipc	a0,0x0
    800024f0:	3ac50513          	addi	a0,a0,940 # 80002898 <_Z9plic_initv+0xb4>
    800024f4:	0c8000ef          	jal	ra,800025bc <_ZN8platform5uart04putsEPKc>

    // csrSet(mie,BIT(csr::mie::meie));
    // MIEnable();
    800024f8:	00000013          	nop
    800024fc:	00813083          	ld	ra,8(sp)
    80002500:	00013403          	ld	s0,0(sp)
    80002504:	01010113          	addi	sp,sp,16
    80002508:	00008067          	ret

000000008000250c <_ZN8platform5uart03regENS0_4regsE>:
            MCR=4,	// Modem Control Register
            LSR=5,	// Line Status Register
            MSR=6,	// Modem Status Register
            SPR=7,	// ScratchPad Register
        };
        constexpr xlen_t reg(regs r){return base+r;}
    8000250c:	fe010113          	addi	sp,sp,-32
    80002510:	00813c23          	sd	s0,24(sp)
    80002514:	02010413          	addi	s0,sp,32
    80002518:	00050793          	mv	a5,a0
    8000251c:	fef42623          	sw	a5,-20(s0)
    80002520:	fec42783          	lw	a5,-20(s0)
    80002524:	00078713          	mv	a4,a5
    80002528:	100007b7          	lui	a5,0x10000
    8000252c:	00f707b3          	add	a5,a4,a5
    80002530:	00078513          	mv	a0,a5
    80002534:	01813403          	ld	s0,24(sp)
    80002538:	02010113          	addi	sp,sp,32
    8000253c:	00008067          	ret

0000000080002540 <_ZN8platform5uart04putcEc>:
            uint8_t rxnemp:1;
            uint8_t unused:4;
            uint8_t txidle:1;
            uint8_t unused1:2;
        };
        inline void putc(char c) {
    80002540:	fd010113          	addi	sp,sp,-48
    80002544:	02113423          	sd	ra,40(sp)
    80002548:	02813023          	sd	s0,32(sp)
    8000254c:	03010413          	addi	s0,sp,48
    80002550:	00050793          	mv	a5,a0
    80002554:	fcf40fa3          	sb	a5,-33(s0)
            while(!mmio<lsr>(reg(LSR)).txidle);
    80002558:	00500513          	li	a0,5
    8000255c:	fb1ff0ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    80002560:	00050793          	mv	a5,a0
    80002564:	fef43423          	sd	a5,-24(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    80002568:	fe843783          	ld	a5,-24(s0)
            while(!mmio<lsr>(reg(LSR)).txidle);
    8000256c:	0007c783          	lbu	a5,0(a5) # 10000000 <STACK_SIZE+0xffffc00>
    80002570:	0207f793          	andi	a5,a5,32
    80002574:	0ff7f793          	andi	a5,a5,255
    80002578:	0007879b          	sext.w	a5,a5
    8000257c:	0017b793          	seqz	a5,a5
    80002580:	0ff7f793          	andi	a5,a5,255
    80002584:	00078463          	beqz	a5,8000258c <_ZN8platform5uart04putcEc+0x4c>
    80002588:	fd1ff06f          	j	80002558 <_ZN8platform5uart04putcEc+0x18>
            mmio<char>(reg(THR))=c;
    8000258c:	00000513          	li	a0,0
    80002590:	f7dff0ef          	jal	ra,8000250c <_ZN8platform5uart03regENS0_4regsE>
    80002594:	00050793          	mv	a5,a0
    80002598:	fef43023          	sd	a5,-32(s0)
    return reinterpret_cast<T&>(*reinterpret_cast<T*>(addr));
    8000259c:	fe043783          	ld	a5,-32(s0)
            mmio<char>(reg(THR))=c;
    800025a0:	fdf44703          	lbu	a4,-33(s0)
    800025a4:	00e78023          	sb	a4,0(a5)
        }
    800025a8:	00000013          	nop
    800025ac:	02813083          	ld	ra,40(sp)
    800025b0:	02013403          	ld	s0,32(sp)
    800025b4:	03010113          	addi	sp,sp,48
    800025b8:	00008067          	ret

00000000800025bc <_ZN8platform5uart04putsEPKc>:
        inline char& getc() {
            while(mmio<lsr>(reg(LSR)).rxnemp);
            return mmio<char>(reg(RHR));
        }
        inline void puts(const char *s){
    800025bc:	fe010113          	addi	sp,sp,-32
    800025c0:	00113c23          	sd	ra,24(sp)
    800025c4:	00813823          	sd	s0,16(sp)
    800025c8:	02010413          	addi	s0,sp,32
    800025cc:	fea43423          	sd	a0,-24(s0)
            while(*s)putc(*s++);
    800025d0:	fe843783          	ld	a5,-24(s0)
    800025d4:	0007c783          	lbu	a5,0(a5)
    800025d8:	02078063          	beqz	a5,800025f8 <_ZN8platform5uart04putsEPKc+0x3c>
    800025dc:	fe843783          	ld	a5,-24(s0)
    800025e0:	00178713          	addi	a4,a5,1
    800025e4:	fee43423          	sd	a4,-24(s0)
    800025e8:	0007c783          	lbu	a5,0(a5)
    800025ec:	00078513          	mv	a0,a5
    800025f0:	f51ff0ef          	jal	ra,80002540 <_ZN8platform5uart04putcEc>
    800025f4:	fddff06f          	j	800025d0 <_ZN8platform5uart04putsEPKc+0x14>
        }
    800025f8:	00000013          	nop
    800025fc:	01813083          	ld	ra,24(sp)
    80002600:	01013403          	ld	s0,16(sp)
    80002604:	02010113          	addi	sp,sp,32
    80002608:	00008067          	ret

000000008000260c <_ZN8platform4plic8enableOfEi>:
            pending=base+0x1000,
            enable=base+0x2000,
            threshold=base+0x200000,
            claim=base+0x200004;
        constexpr xlen_t priorityOf(int id) {return priority+id*4;}
        constexpr xlen_t enableOf(int hart) { return enable+hart*0x80; }
    8000260c:	fe010113          	addi	sp,sp,-32
    80002610:	00813c23          	sd	s0,24(sp)
    80002614:	02010413          	addi	s0,sp,32
    80002618:	00050793          	mv	a5,a0
    8000261c:	fef42623          	sw	a5,-20(s0)
    80002620:	fec42783          	lw	a5,-20(s0)
    80002624:	0077979b          	slliw	a5,a5,0x7
    80002628:	0007879b          	sext.w	a5,a5
    8000262c:	00078713          	mv	a4,a5
    80002630:	0c0027b7          	lui	a5,0xc002
    80002634:	00f707b3          	add	a5,a4,a5
    80002638:	00078513          	mv	a0,a5
    8000263c:	01813403          	ld	s0,24(sp)
    80002640:	02010113          	addi	sp,sp,32
    80002644:	00008067          	ret

0000000080002648 <_ZN8platform4plic7claimOfEi>:
        constexpr xlen_t thresholdOf(int hart) { return threshold+hart*0x1000; }
        constexpr xlen_t claimOf(int hart) { return claim+hart*0x1000; }
    80002648:	fe010113          	addi	sp,sp,-32
    8000264c:	00813c23          	sd	s0,24(sp)
    80002650:	02010413          	addi	s0,sp,32
    80002654:	00050793          	mv	a5,a0
    80002658:	fef42623          	sw	a5,-20(s0)
    8000265c:	fec42783          	lw	a5,-20(s0)
    80002660:	00c7979b          	slliw	a5,a5,0xc
    80002664:	0007879b          	sext.w	a5,a5
    80002668:	00078713          	mv	a4,a5
    8000266c:	0c2007b7          	lui	a5,0xc200
    80002670:	00478793          	addi	a5,a5,4 # c200004 <STACK_SIZE+0xc1ffc04>
    80002674:	00f707b3          	add	a5,a4,a5
    80002678:	00078513          	mv	a0,a5
    8000267c:	01813403          	ld	s0,24(sp)
    80002680:	02010113          	addi	sp,sp,32
    80002684:	00008067          	ret

0000000080002688 <_Z4Hartv>:
inline int Hart(){
    80002688:	fe010113          	addi	sp,sp,-32
    8000268c:	00813c23          	sd	s0,24(sp)
    80002690:	02010413          	addi	s0,sp,32
    int rt; csrRead(mhartid,rt);
    80002694:	f14027f3          	csrr	a5,mhartid
    80002698:	fef42623          	sw	a5,-20(s0)
    return rt;
    8000269c:	fec42783          	lw	a5,-20(s0)
}
    800026a0:	00078513          	mv	a0,a5
    800026a4:	01813403          	ld	s0,24(sp)
    800026a8:	02010113          	addi	sp,sp,32
    800026ac:	00008067          	ret

00000000800026b0 <_Z9uart_initv>:

#define uart_read_reg(reg) (*(UART_REG(reg)))
#define uart_write_reg(reg, v) (*(UART_REG(reg)) = (v))

void uart_init()
{
    800026b0:	fe010113          	addi	sp,sp,-32
    800026b4:	00813c23          	sd	s0,24(sp)
    800026b8:	02010413          	addi	s0,sp,32
	/* disable interrupts. */
	uart_write_reg(IER, 0x00);
    800026bc:	100007b7          	lui	a5,0x10000
    800026c0:	00178793          	addi	a5,a5,1 # 10000001 <STACK_SIZE+0xffffc01>
    800026c4:	00078023          	sb	zero,0(a5)
	 * We use 38.4K when 1.8432 MHZ crystal, so the corresponding value is 3.
	 * And due to the divisor register is two bytes (16 bits), so we need to
	 * split the value of 3(0x0003) into two bytes, DLL stores the low byte,
	 * DLM stores the high byte.
	 */
	uint8_t lcr = uart_read_reg(LCR);
    800026c8:	100007b7          	lui	a5,0x10000
    800026cc:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    800026d0:	0007c783          	lbu	a5,0(a5)
    800026d4:	fef407a3          	sb	a5,-17(s0)
	uart_write_reg(LCR, lcr | (1 << 7));
    800026d8:	100007b7          	lui	a5,0x10000
    800026dc:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    800026e0:	fef44703          	lbu	a4,-17(s0)
    800026e4:	f8076713          	ori	a4,a4,-128
    800026e8:	0ff77713          	andi	a4,a4,255
    800026ec:	00e78023          	sb	a4,0(a5)
	uart_write_reg(DLL, 0x03);
    800026f0:	100007b7          	lui	a5,0x10000
    800026f4:	00300713          	li	a4,3
    800026f8:	00e78023          	sb	a4,0(a5) # 10000000 <STACK_SIZE+0xffffc00>
	uart_write_reg(DLM, 0x00);
    800026fc:	100007b7          	lui	a5,0x10000
    80002700:	00178793          	addi	a5,a5,1 # 10000001 <STACK_SIZE+0xffffc01>
    80002704:	00078023          	sb	zero,0(a5)
	 * - number of stop bits：1 bit when word length is 8 bits
	 * - no parity
	 * - no break control
	 * - disabled baud latch
	 */
	lcr = 0;
    80002708:	fe0407a3          	sb	zero,-17(s0)
	uart_write_reg(LCR, lcr | (3 << 0));
    8000270c:	100007b7          	lui	a5,0x10000
    80002710:	00378793          	addi	a5,a5,3 # 10000003 <STACK_SIZE+0xffffc03>
    80002714:	fef44703          	lbu	a4,-17(s0)
    80002718:	00376713          	ori	a4,a4,3
    8000271c:	0ff77713          	andi	a4,a4,255
    80002720:	00e78023          	sb	a4,0(a5)
}
    80002724:	00000013          	nop
    80002728:	01813403          	ld	s0,24(sp)
    8000272c:	02010113          	addi	sp,sp,32
    80002730:	00008067          	ret

0000000080002734 <_Z9uart_putcc>:

int uart_putc(char ch)
{
    80002734:	fe010113          	addi	sp,sp,-32
    80002738:	00813c23          	sd	s0,24(sp)
    8000273c:	02010413          	addi	s0,sp,32
    80002740:	00050793          	mv	a5,a0
    80002744:	fef407a3          	sb	a5,-17(s0)
	while ((uart_read_reg(LSR) & LSR_TX_IDLE) == 0);
    80002748:	100007b7          	lui	a5,0x10000
    8000274c:	00578793          	addi	a5,a5,5 # 10000005 <STACK_SIZE+0xffffc05>
    80002750:	0007c783          	lbu	a5,0(a5)
    80002754:	0ff7f793          	andi	a5,a5,255
    80002758:	0007879b          	sext.w	a5,a5
    8000275c:	0207f793          	andi	a5,a5,32
    80002760:	0007879b          	sext.w	a5,a5
    80002764:	0017b793          	seqz	a5,a5
    80002768:	0ff7f793          	andi	a5,a5,255
    8000276c:	00078463          	beqz	a5,80002774 <_Z9uart_putcc+0x40>
    80002770:	fd9ff06f          	j	80002748 <_Z9uart_putcc+0x14>
	return uart_write_reg(THR, ch);
    80002774:	10000737          	lui	a4,0x10000
    80002778:	fef44783          	lbu	a5,-17(s0)
    8000277c:	00f70023          	sb	a5,0(a4) # 10000000 <STACK_SIZE+0xffffc00>
    80002780:	0007879b          	sext.w	a5,a5
}
    80002784:	00078513          	mv	a0,a5
    80002788:	01813403          	ld	s0,24(sp)
    8000278c:	02010113          	addi	sp,sp,32
    80002790:	00008067          	ret

0000000080002794 <_Z9uart_putsPc>:

void uart_puts(char *s)
{
    80002794:	fe010113          	addi	sp,sp,-32
    80002798:	00113c23          	sd	ra,24(sp)
    8000279c:	00813823          	sd	s0,16(sp)
    800027a0:	02010413          	addi	s0,sp,32
    800027a4:	fea43423          	sd	a0,-24(s0)
	while (*s) {
    800027a8:	fe843783          	ld	a5,-24(s0)
    800027ac:	0007c783          	lbu	a5,0(a5)
    800027b0:	02078063          	beqz	a5,800027d0 <_Z9uart_putsPc+0x3c>
		uart_putc(*s++);
    800027b4:	fe843783          	ld	a5,-24(s0)
    800027b8:	00178713          	addi	a4,a5,1
    800027bc:	fee43423          	sd	a4,-24(s0)
    800027c0:	0007c783          	lbu	a5,0(a5)
    800027c4:	00078513          	mv	a0,a5
    800027c8:	f6dff0ef          	jal	ra,80002734 <_Z9uart_putcc>
	while (*s) {
    800027cc:	fddff06f          	j	800027a8 <_Z9uart_putsPc+0x14>
	}
}
    800027d0:	00000013          	nop
    800027d4:	01813083          	ld	ra,24(sp)
    800027d8:	01013403          	ld	s0,16(sp)
    800027dc:	02010113          	addi	sp,sp,32
    800027e0:	00008067          	ret

00000000800027e4 <_Z9plic_initv>:
#define PLIC_MTHRESHOLD(hart) (PLIC_BASE + 0x200000 + (hart) * 0x1000)
#define PLIC_MCLAIM(hart) (PLIC_BASE + 0x200004 + (hart) * 0x1000)
#define PLIC_MCOMPLETE(hart) (PLIC_BASE + 0x200004 + (hart) * 0x1000)

void plic_init(void)
{
    800027e4:	fe010113          	addi	sp,sp,-32
    800027e8:	00813c23          	sd	s0,24(sp)
    800027ec:	02010413          	addi	s0,sp,32
	int hart = 0;
    800027f0:	fe042623          	sw	zero,-20(s0)
	 * Priority 1 is the lowest active priority, and priority 7 is the highest. 
	 * Ties between global interrupts of the same priority are broken by 
	 * the Interrupt ID; interrupts with the lowest ID have the highest 
	 * effective priority.
	 */
	*(unsigned int*)PLIC_PRIORITY(UART0_IRQ) = 1;
    800027f4:	0c0007b7          	lui	a5,0xc000
    800027f8:	02878793          	addi	a5,a5,40 # c000028 <STACK_SIZE+0xbfffc28>
    800027fc:	00100713          	li	a4,1
    80002800:	00e7a023          	sw	a4,0(a5)
	 * Enable UART0
	 *
	 * Each global interrupt can be enabled by setting the corresponding 
	 * bit in the enables registers.
	 */
	*(unsigned*)PLIC_MENABLE(hart)= (1 << UART0_IRQ);
    80002804:	fec42783          	lw	a5,-20(s0)
    80002808:	0077979b          	slliw	a5,a5,0x7
    8000280c:	0007879b          	sext.w	a5,a5
    80002810:	00078713          	mv	a4,a5
    80002814:	0c0027b7          	lui	a5,0xc002
    80002818:	00f707b3          	add	a5,a4,a5
    8000281c:	00078713          	mv	a4,a5
    80002820:	40000793          	li	a5,1024
    80002824:	00f72023          	sw	a5,0(a4)
	 * Maximum threshold is 7.
	 * For example, a threshold value of zero permits all interrupts with
	 * non-zero priority, whereas a value of 7 masks all interrupts.
	 * Notice, the threshold is global for PLIC, not for each interrupt source.
	 */
	*(unsigned*)PLIC_MTHRESHOLD(hart) = 0;
    80002828:	fec42783          	lw	a5,-20(s0)
    8000282c:	00c7979b          	slliw	a5,a5,0xc
    80002830:	0007879b          	sext.w	a5,a5
    80002834:	00078713          	mv	a4,a5
    80002838:	0c2007b7          	lui	a5,0xc200
    8000283c:	00f707b3          	add	a5,a4,a5
    80002840:	0007a023          	sw	zero,0(a5) # c200000 <STACK_SIZE+0xc1ffc00>
	/* enable machine-mode external interrupts. */
	// w_mie(r_mie() | MIE_MEIE);

	/* enable machine-mode global interrupts. */
	// w_mstatus(r_mstatus() | MSTATUS_MIE);
}
    80002844:	00000013          	nop
    80002848:	01813403          	ld	s0,24(sp)
    8000284c:	02010113          	addi	sp,sp,32
    80002850:	00008067          	ret
